(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[1306],{35318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},34411:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=t(29603),r=t(50120),o=(t(27378),t(35318)),i=["components"],l={id:"typescript-svelte-apollo",title:"Typescript Svelte Apollo"},s={unversionedId:"plugins/typescript-svelte-apollo",id:"plugins/typescript-svelte-apollo",isDocsHomePage:!1,title:"Typescript Svelte Apollo",description:"This plugin generates observable Apollo queries with Typescript typings.",source:"@site/docs/plugins/typescript-svelte-apollo.md",sourceDirName:"plugins",slug:"/plugins/typescript-svelte-apollo",permalink:"/docs/plugins/typescript-svelte-apollo",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-svelte-apollo.md",version:"current",frontMatter:{id:"typescript-svelte-apollo",title:"Typescript Svelte Apollo"},sidebar:"sidebar",previous:{title:"TypeScript React Apollo",permalink:"/docs/plugins/typescript-react-apollo"},next:{title:"TypeScript Vue Apollo Composition API",permalink:"/docs/plugins/typescript-vue-apollo"}},p=[{value:"Installation",id:"installation",children:[]},{value:"API Reference",id:"api-reference",children:[{value:"<code>clientPath</code>",id:"clientpath",children:[]},{value:"<code>asyncQuery</code>",id:"asyncquery",children:[]}]},{value:"Usage Example",id:"usage-example",children:[{value:"With Observable queries",id:"with-observable-queries",children:[]},{value:"With Async Queries",id:"with-async-queries",children:[]}]}],c={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This plugin generates observable Apollo queries with Typescript typings."),(0,o.kt)("p",null,"This is a community plugin, to report eventual issues or find more examples, refer to this ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ticruz38/graphql-codegen-svelte-apollo#readme"},"repository")),(0,o.kt)("p",null,"It extends the basic TypeScript plugins: ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-codegen/typescript"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-codegen/typescript-operations")," - and thus shares a similar configuration."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("img",{alt:"graphql-codegen-svelte-apollo plugin version",src:"https://img.shields.io/npm/v/graphql-codegen-svelte-apollo?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,o.kt)("div",{className:"admonition admonition-shell"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,o.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,o.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"yarn add -D graphql-codegen-svelte-apollo\n")))),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"clientpath"},(0,o.kt)("inlineCode",{parentName:"h3"},"clientPath")),(0,o.kt)("p",null,"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"\nrequired: true"),(0,o.kt)("p",null,"Path to the apollo client for this project (should point to a file with an apollo-client as default export)"),(0,o.kt)("h4",{id:"usage-examples"},"Usage Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-operations\n   - graphql-codegen-svelte-apollo\n config:\n   clientPath: PATH_TO_APOLLO_CLIENT\n")),(0,o.kt)("h3",{id:"asyncquery"},(0,o.kt)("inlineCode",{parentName:"h3"},"asyncQuery")),(0,o.kt)("p",null,"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,"By default, the plugin only generate observable queries, sometimes it may be useful to generate promise-based queries"),(0,o.kt)("h4",{id:"usage-examples-1"},"Usage Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-operations\n   - graphql-codegen-svelte-apollo\n config:\n   clientPath: PATH_TO_APOLLO_CLIENT\n   asyncQuery: true\n")),(0,o.kt)("h2",{id:"usage-example"},"Usage Example"),(0,o.kt)("h3",{id:"with-observable-queries"},"With Observable queries"),(0,o.kt)("p",null,"For the given input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"fragment TransactionFragment on TransactionDescription {\n    contractAddress\n    from\n    gasUsed\n    gasPrice\n    input\n    isError\n    to\n    value\n}\n\nquery Transactions($address: String) {\n    transactions(address: $address) {\n        ...TransactionFragment\n    }\n}\n")),(0,o.kt)("p",null,"And the following configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'schema: YOUR_SCHEMA_HERE\ndocuments: "./src/**/*.graphql"\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-operations\n   - graphql-codegen-svelte-apollo\n config:\n   clientPath: PATH_TO_APOLLO_CLIENT\n')),(0,o.kt)("p",null,"Codegen will pre-compile the GraphQL operation into a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentNode")," object, and generate a ready-to-use Apollo query for each operation you have."),(0,o.kt)("p",null,"In you application code, you can import it from the generated file, and use the query in your component code: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<script lang="ts">\n  import { Transactions } from "codegen";\n\n  var address = "0x0000000000000000000000000000"\n  $: t = Transactions({ address });\n<\/script>\n\n<ul>\n    {#each $t?.data?.transactions || [] as transaction}\n        <li>Sent transaction from {transaction.from} to {transaction.to}</li>\n    {/each}\n</ul>\n')),(0,o.kt)("p",null,"Each time you change the address, the query will re-fetch and show the new results in the template."),(0,o.kt)("h3",{id:"with-async-queries"},"With Async Queries"),(0,o.kt)("p",null,"Sometimes, you may need/prefer to have an async query (only available with asyncQuery option set to true)"),(0,o.kt)("p",null,"For the given input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"fragment TransactionFragment on TransactionDescription {\n    contractAddress\n    from\n    gasUsed\n    gasPrice\n    input\n    isError\n    to\n    value\n}\n\nquery Transactions($address: String) {\n    transactions(address: $address) {\n        ...TransactionFragment\n    }\n}\n")),(0,o.kt)("p",null,"And the following configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'schema: YOUR_SCHEMA_HERE\ndocuments: "./src/**/*.graphql"\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-operations\n   - graphql-codegen-svelte-apollo\n config:\n   clientPath: PATH_TO_APOLLO_CLIENT\n   asyncQuery: true\n')),(0,o.kt)("p",null,"Codegen will pre-compile the GraphQL operation into a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentNode")," object, and generate a ready-to-use Apollo query for each operation you have."),(0,o.kt)("p",null,"In you application code, you can import it from the generated file, and use the query in your component code: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<script lang="ts">\n  import { AsyncTransactions } from "codegen";\n\n  var address = "0x0000000000000000000000000000"\n<\/script>\n\n<ul>\n  {#await AsyncTransactions({ address })}\n    Loading...\n  {:then transactions}\n    {#each transactions || [] as transaction}\n        <li>Sent transaction from {transaction.from} to {transaction.to}</li>\n    {/each}\n  {/await}\n</ul>\n')))}u.isMDXComponent=!0}}]);