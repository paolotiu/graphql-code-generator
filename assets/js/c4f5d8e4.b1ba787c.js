(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[4195],{29198:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return we}});var a=n(29603),o=n(82218),i=n(27378),s=n(60042),r=n.n(s),l=n(3513),p=n(31142),u={buttons:"buttons_1r9m",features:"features_3azU",featureImage:"featureImage_ZtzX",headerCover:"headerCover_3ltZ",cover:"cover_3FaG",coverContainer:"coverContainer_1jTy",homeContainer:"homeContainer_2KOB",projectTitle:"projectTitle_1cf8",desktopOnly:"desktopOnly_3p-0",buttonsWrapper:"buttonsWrapper_2vxP"},c=n(9559),d=n(50120),f="button_1VTR",h="buttonContained_2pV-",m="mobileHide_3hm9",g=["mobileHide"],y=function(e){var t,n=e.mobileHide,o=(0,d.Z)(e,g);return i.createElement("button",(0,a.Z)({},o,{className:r()((t={},t[h]=o.contained,t[f]=!o.contained,t[m]=!!n,t[o.className]=!0,t))}),o.children)},v=n(16726),b=n(41476),w=n(57135),C=n.n(w),T=n(47180),D="picker_3XiF",x="exampleDesc_o-N0",q="exampleIcon_2Tik",k="exampleTag_2QTE",S="exampleTags_1_a0",A="container_1zEf",F="column_xq-3",P="title_3fGx",I="tabs_1EI5",L="tab_1lqR",N="activeTab_18FJ",j="iconText_1JDY",Q="logo_1uzv",G={"react-query":function(e){return i.createElement("img",{alt:"React-Query",className:q,key:e,src:"/img/icons/react-query.svg"})},typescript:function(e){return i.createElement("img",{alt:"TypeScript",className:q,key:e,src:"/img/icons/typescript.svg"})},react:function(e){return i.createElement("img",{alt:"React",className:q,key:e,src:"/img/icons/react.svg"})},apollo:function(e){return i.createElement("img",{alt:"Apollo GraphQL",className:q,key:e,src:"/img/icons/apollo.svg"})},csharp:function(e){return i.createElement("img",{alt:"C#",className:q,key:e,src:"/img/icons/csharp.svg"})},graphql:function(e){return i.createElement("img",{alt:"GraphQL",className:q,key:e,src:"/img/icons/graphql.svg"})},vue:function(e){return i.createElement("img",{alt:"VueJS",className:q,key:e,src:"/img/icons/vue.svg"})},java:function(e){return i.createElement("img",{alt:"Java",className:q,key:e,src:"/img/icons/java.svg"})},flow:function(e){return i.createElement("img",{alt:"FlowJS",className:q,key:e,src:"/img/icons/flow.svg"})},angular:function(e){return i.createElement("img",{alt:"Angular",className:q,key:e,src:"/img/icons/angular.svg"})},urql:function(e){return i.createElement("img",{alt:"urql",className:q,key:e,src:"/img/icons/urql.svg"})},nodejs:function(e){return i.createElement("img",{alt:"NodeJS",className:q,key:e,src:"/img/icons/nodejs.svg"})},"type-graphql":function(e){return i.createElement("img",{alt:"type-graphql",className:q,key:e,src:"/img/icons/type-graphql.png"})},mongodb:function(e){return i.createElement("img",{alt:"MongoDB",className:q,key:e,src:"/img/icons/mongodb.png"})}},M="scalar Date\n\nschema {\n  query: Query\n}\n\ntype Query {\n  me: User!\n  user(id: ID!): User\n  allUsers: [User]\n  search(term: String!): [SearchResult!]!\n  myChats: [Chat!]!\n}\n\nenum Role {\n  USER,\n  ADMIN,\n}\n\ninterface Node {\n  id: ID!\n}\n\nunion SearchResult = User | Chat | ChatMessage\n\ntype User implements Node {\n  id: ID!\n  username: String!\n  email: String!\n  role: Role!\n}\n\ntype Chat implements Node {\n  id: ID!\n  users: [User!]!\n  messages: [ChatMessage!]!\n}\n\ntype ChatMessage implements Node {\n  id: ID!\n  content: String!\n  time: Date!\n  user: User!\n}\n",O="query findUser($userId: ID!) {\n  user(id: $userId) {\n    ...UserFields\n  }\n}\n\nfragment UserFields on User {\n  id\n  username\n  role\n}",E={TypeScript:[{name:"Schema types",description:"This is the simplest example of generating output based on a GraphQL Schema. Codegen will generate the compatible base type, based on your schema. These type declarations are 1:1 to your schema, and it will be used as base types for other Codegen plugins (such as `typescript-operations`), while combined into the same file.",tags:["typescript","frontend","backend"],config:"generates:\n  types.ts:\n    plugins:\n      - typescript",schema:M,documents:""},{name:"Operations types",description:"This examples uses the based types from `typescript` plugin, and generates TypeScript signature based on your GraphQL operations (query/mutation/subscription/fragment) and the selection set you choose in each operation.",tags:["typescript","frontend"],config:"generates:\n  operations-types.ts:\n    plugins:\n      - typescript\n      - typescript-operations",schema:M,documents:O},{name:"Operations types (near-operation-file)",description:"This examples uses the based types from `typescript` plugin, and generates TypeScript signature based on your GraphQL operations (query/mutation/subscription/fragment) and the selection set you choose in each operation. It uses Presets feature to manipulate the output of the codegen, and generate multiple files. In this example, it will generate a file per each operation, near the source file.",tags:["typescript","frontend"],config:"generates:\n  ./types.ts:\n    plugins:\n      - typescript\n  ./:\n    preset: near-operation-file\n    presetConfig:\n      extension: .generated.tsx\n      baseTypesPath: types.ts\n    plugins:\n      - typescript-operations\n      - typescript-react-apollo",schema:M,documents:O},{name:"Operations types (without Pick)",description:"This is a similar output to regular usage of `typescript-operations`, but instead of using `Pick`, it will use the primitive value when possible, and reduce the output to the minimal types possible.",tags:["typescript","frontend"],config:"generates:\n  operations-types.ts:\n    config:\n      onlyOperationTypes: true\n      preResolveTypes: true\n    plugins:\n      - typescript\n      - typescript-operations",schema:M,documents:O},{name:"TypedDocumentNode",description:"This plugin generates a per-compiled version of `DocumentNode`, with the result and variables types bundled into the object, using this library: https://github.com/dotansimha/graphql-typed-document-node",tags:["typescript","frontend"],config:"generates:\n  operations-types.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typed-document-node",schema:M,documents:O},{name:"Apollo-Client v3 TypePolicies",description:"This plugin generates fully-typed `keyFields` and Type-Policies for Apollo-Client v3.",tags:["typescript","apollo"],config:"generates:\n      type-policies.ts:\n        plugins:\n          - typescript-apollo-client-helpers",schema:M},{name:"React-Query Hooks",description:'This example uses types generated by `typescript` and `typescript-operations`, and creates a fully type-safe React Hooks, based on your GraphQL operations, that wraps "react-query" hooks.',tags:["typescript","react","react-query","frontend"],config:"generates:\n  types-and-hooks.tsx:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-react-query",schema:M,documents:O},{name:"RTK-Query Hooks",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates fully type-safe React Hooks, based on your GraphQL operations, by injecting those into an existing RTK-Query api.",tags:["typescript","react","rtk-query","redux","frontend"],config:"generates:\n  types-and-hooks.tsx:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-rtk-query:\n          importBaseApiFrom: 'src/app/api/baseApi'\n          exportHooks: true",schema:M,documents:O},{name:"React-Apollo Hooks",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates fully type-safe React Hooks, based on your GraphQL operations.",tags:["typescript","react","apollo","frontend"],config:"generates:\n  types-and-hooks.tsx:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-react-apollo",schema:M,documents:O},{name:"React-Apollo Data Components (deprecated)",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates a fully type-safe React Components, based on your GraphQL operations.",tags:["typescript","react","apollo","frontend"],config:"generates:\n  types-and-components.tsx:\n    config:\n      withComponent: true\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-react-apollo",schema:M,documents:O},{name:"React-Apollo Data HOC (deprecated)",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates a fully type-safe React HOC, based on your GraphQL operations.",tags:["typescript","react","apollo","frontend"],config:"generates:\n  types-and-hoc.tsx:\n    config:\n      withHOC: true\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-react-apollo",schema:M,documents:O},{name:"Vue-Apollo composition functions",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates a fully type-safe Vue composition components, based on your GraphQL operations.",tags:["typescript","vue","apollo","frontend"],config:"generates:\n  composition-functions.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-vue-apollo",schema:M,documents:O},{name:"Vue-Apollo Smart Operation functions",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates fully type-safe Vue Apollo Smart Query options and mutation functions, based on your GraphQL operations.",tags:["typescript","vue","apollo","frontend"],config:"generates:\n  composition-functions.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-vue-apollo-smart-ops",schema:M,documents:O},{name:"Apollo-Angular Components",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates a fully type-safe Angular `Service`, based on your GraphQL operations.",tags:["typescript","angular","apollo","frontend"],config:"generates:\n  components.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-apollo-angular",schema:M,documents:O},{name:"Urql",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates a fully type-safe Urql Hooks, based on your GraphQL operations.",tags:["typescript","urql","react","frontend"],config:"generates:\n  components.tsx:\n    config:\n      withHooks: true\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-urql",schema:M,documents:O},{name:"Stencil-Apollo Components",description:"This example uses types generated by `typescript` and `typescript-operations`, and creates a fully Stencil Components, based on your GraphQL operations.",tags:["typescript","apollo","stencil","frontend"],config:"generates:\n  components.tsx:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-stencil-apollo",schema:M,documents:O},{name:"Resolvers Signature",description:"This example demonstrate how to generate a basic resolver signature, based on your GraphQL schema. With the default setup, you'll need to adjust your models types to the same structure of your GraphQL schema (see mappers example for more advanced usage).\n      \n[You can read more about using this plugin here](https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen)",tags:["nodejs","backend"],config:"generates:\n  resolvers.ts:\n    plugins:\n      - typescript\n      - typescript-resolvers",schema:M,documents:""},{name:"Resolvers Signature (with custom models)",description:"This example demonstrate how to generate resolvers signature, based on your GraphQL schema, with your model types (`mappers` configuration)\n      \n[You can read more about using this plugin here](https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen)",tags:["nodejs","backend"],config:"generates:\n  resolvers.ts:\n    config:\n      mappers:\n        User: ./models#UserDbObject\n        Chat: ./models#ChatModel\n    plugins:\n      - typescript\n      - typescript-resolvers",schema:M,documents:""},{name:"graphql-request typed SDK",tags:["nodejs","backend","frontend"],config:"generates:\n  sdk.ts:\n    plugins:\n      - typescript\n      - typescript-graphql-request",schema:M,documents:O},{name:"Generic SDK",tags:["nodejs","backend"],config:"generates:\n  sdk.ts:\n    plugins:\n      - typescript\n      - typescript-generic-sdk",schema:M,documents:O},{name:"type-graphql",tags:["type-graphql","nodejs","backend"],config:"generates:\n  types.ts:\n    plugins:\n      - typescript-type-graphql",schema:M,documents:""},{name:"MongoDB Models",tags:["mongodb","nodejs","backend"],config:"generates:\n    models.ts:\n      plugins:\n        - typescript-mongodb",schema:'type User @entity {\n    id: ID! @id\n    username: String! @column\n    email: String! @column @map(\n      path: "login.email"\n    )\n    profile: Profile! @column\n    chats: [Chat!]! @link\n  }\n  \n  type Profile @entity(embedded: true,\n    additionalFields: [\n      { path: "dateOfBirth", type: "string" }\n    ]) {\n    name: String! @column\n    age: Int\n  }\n  \n  type Chat @entity {\n    id: ID! @id\n    users: [User!]! @link\n    messages: [ChatMessage!]!\n  }\n  \n  type ChatMessage @entity {\n    id: ID! @id\n    chat: Chat! @link\n    content: String! @column\n    author: User! @link\n  }\n  ',documents:""}],".NET":[{name:"C# Schema types",tags:["csharp","frontend","backend"],config:"generates:\n  src/main/c-sharp/my-org/my-app/Types.cs:\n    plugins:\n      - c-sharp",schema:M,documents:""},{name:"C# Operations",tags:["csharp","frontend"],config:"generates:\n  src/main/c-sharp/my-org/my-app/Operations.cs:\n    plugins:\n      - c-sharp-operations",schema:M,documents:O}],Java:[{name:"Types (Enum & Input)",tags:["java","backend"],config:"generates:\n  src/main/java/my/app/generated/Types.java:\n    plugins:\n      - java",schema:M,documents:""},{name:"Resolvers Signature",tags:["java","backend"],config:"generates:\n  src/main/java/my/app/generated/Resolvers.java:\n    plugins:\n      - java-resolvers",schema:M,documents:""},{name:"Apollo Android",tags:["java","apollo","frontend"],config:'generates:\n  ./app/src/main/java/:\n    preset: java-apollo-android\n    config:\n      package: "com.my.paackage.generated.graphql"\n      typePackage: "com.my.paackage.generated.Types"\n      fragmentPackage: "com.my.paackage.generated.Fragment"\n    plugins:\n      - java-apollo-android',schema:M,documents:O}],Flow:[{name:"Schema types",tags:["flow","frontend","backend"],config:"generates:\n  types.flow.js:\n    plugins:\n      - flow\n    ",schema:M,documents:""},{name:"Resolvers Signature",tags:["flow","backend"],config:"generates:\n  resolvers.flow.js:\n    plugins:\n      - flow\n      - flow-resolvers\n    ",schema:M,documents:""},{name:"Operations types",tags:["flow","frontend"],config:"generates:\n  types.flow.js:\n    plugins:\n      - flow\n      - flow-operations\n    ",schema:M,documents:O}],Other:[{name:"JSDoc",config:"generates:\n  schema.js:\n    plugins:\n      - jsdoc",schema:M,documents:""},{name:"Introspection JSON",tags:["graphql"],config:"generates:\n  schema.json:\n    plugins:\n      - introspection",schema:M,documents:""},{name:"Schema AST",tags:["graphql"],config:"generates:\n  schema.graphql:\n    plugins:\n      - schema-ast",schema:M,documents:""},{name:"Fragment Matcher",tags:["typescript","apollo","frontend"],config:"generates:\n  fragment-matcher.json:\n    plugins:\n      - fragment-matcher",schema:M,documents:""}]},R={ts:"typescript","d.ts":"typescript",tsx:"typescript",graphql:"graphql",json:"json",java:"java",js:"javascript",jsx:"javascript"};function $(e){var t;return"string"==typeof e?[(t={},t[e]={},t)]:Array.isArray(e)?e.map((function(e){var t;return"string"==typeof e?((t={})[e]={},t):e})):"object"==typeof e?Object.keys(e).reduce((function(t,n){var a;return[].concat(t,[(a={},a[n]=e[n],a)])}),[]):[]}var _={"near-operation-file":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(3579)]).then(n.bind(n,44775))},"import-types":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(9116)]).then(n.bind(n,59116))},"java-apollo-android":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(6305),n.e(2472)]).then(n.bind(n,29062))}},V={jsdoc:function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(4695)]).then(n.bind(n,93425))},java:function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(4391)]).then(n.bind(n,71321))},"java-resolvers":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(8140)]).then(n.bind(n,3318))},"fragment-matcher":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(5205)]).then(n.bind(n,55205))},flow:function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(9277)]).then(n.bind(n,5348))},"flow-operations":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(7453)]).then(n.bind(n,50022))},"flow-resolvers":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(2885)]).then(n.bind(n,18826))},typescript:function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(8268)]).then(n.bind(n,40980))},"typescript-compatibility":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(5999)]).then(n.bind(n,10617))},"typescript-operations":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(8892)]).then(n.bind(n,90675))},"typescript-resolvers":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(4971)]).then(n.bind(n,11225))},"typescript-apollo-angular":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(75)]).then(n.bind(n,9754))},"typescript-react-apollo":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(3840)]).then(n.bind(n,56447))},"typescript-vue-apollo":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(7041)]).then(n.bind(n,83345))},"typescript-vue-apollo-smart-ops":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(6911)]).then(n.bind(n,84461))},"typescript-vue-urql":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(5487)]).then(n.bind(n,3667))},"typescript-stencil-apollo":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(3379)]).then(n.bind(n,51005))},"typescript-graphql-files-modules":function(){return n.e(7882).then(n.bind(n,37882))},"typescript-graphql-request":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(1939)]).then(n.bind(n,9033))},"typescript-generic-sdk":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(9161)]).then(n.bind(n,87717))},"typescript-type-graphql":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(7412)]).then(n.bind(n,8075))},"typescript-react-query":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(1205)]).then(n.bind(n,83479))},"typescript-rtk-query":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(1619)]).then(n.bind(n,5220))},"typescript-mongodb":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(7489)]).then(n.bind(n,45417))},"java-apollo-android":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(6305),n.e(2472)]).then(n.bind(n,29062))},"c-sharp-operations":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(3668)]).then(n.bind(n,89990))},"c-sharp":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(3136)]).then(n.bind(n,7028))},"typescript-urql":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(3080)]).then(n.bind(n,18415))},"typed-document-node":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(506),n.e(5779),n.e(2641)]).then(n.bind(n,37008))},add:function(){return n.e(6214).then(n.bind(n,96214))},time:function(){return Promise.all([n.e(6243),n.e(3584)]).then(n.bind(n,2618))},introspection:function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4424)]).then(n.bind(n,44424))},"schema-ast":function(){return Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(4442),n.e(4455),n.e(4954)]).then(n.bind(n,84954))},"typescript-apollo-client-helpers":function(){return Promise.all([n.e(3067),n.e(5175)]).then(n.bind(n,65175))}},U=n(30138),Y=["generates"];function W(e,t,n){return z.apply(this,arguments)}function z(){return(z=(0,b.Z)(C().mark((function e(t,a,o){var i,s,r,l,p,u,c,f,h,m,g,y,v,w,T,D,x;return C().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,i=[],e.next=4,Promise.all([Promise.resolve().then(n.bind(n,47180)).then((function(e){return"default"in e?e.default:e})),Promise.all([n.e(3067),n.e(3586),n.e(8784),n.e(2851),n.e(8361),n.e(4442),n.e(4455),n.e(6197),n.e(3530)]).then(n.bind(n,43530)).then((function(e){return"default"in e?e.default:e})),Promise.all([n.e(3067),n.e(3586),n.e(2851),n.e(8361),n.e(4442),n.e(506)]).then(n.bind(n,60506)).then((function(e){return"default"in e?e.default:e}))]);case 4:s=e.sent,r=s[0].load,l=s[1].codegen,p=s[2].parse,u=t.replace(/\t/g,"  "),c=r(u),f=c.generates,h=(0,d.Z)(c,Y),m=h.config||{},g=[],y=C().mark((function e(){var t,n,i,s,r,l,u,c,d,f;return C().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=w[v],n=t[0],i=t[1],s=!!i.preset,r=$(i.plugins||i),l=i.config,u={},e.next=7,Promise.all(r.map(function(){var e=(0,b.Z)(C().mark((function e(t){var n;return C().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=Object.keys(t)[0],e.prev=1,e.next=4,V[n]();case 4:u[n]=e.sent,e.next=10;break;case 7:e.prev=7,e.t0=e.catch(1),U.error('Unable to find codegen plugin named "'+n+'"...');case 10:case"end":return e.stop()}}),e,null,[[1,7]])})));return function(t){return e.apply(this,arguments)}}()));case 7:if(c=Object.assign({},m,l),s){e.next=12;break}g.push({filename:n,plugins:r,schema:p(a),documents:o?[{location:"operation.graphql",document:p(o)}]:[],config:c,pluginMap:u}),e.next=22;break;case 12:return e.next=14,_[i.preset]();case 14:return d=e.sent,f="function"==typeof d?d:d.preset,e.t0=g.push,e.t1=g,e.next=20,f.buildGeneratesSection({baseOutputDir:n,presetConfig:i.presetConfig||{},plugins:r,schema:p(a),documents:o?[{location:"operation.graphql",document:p(o)}]:[],config:c,pluginMap:u});case 20:e.t2=e.sent,e.t0.apply.call(e.t0,e.t1,e.t2);case 22:case"end":return e.stop()}}),e)})),v=0,w=Object.entries(f);case 14:if(!(v<w.length)){e.next=19;break}return e.delegateYield(y(),"t0",16);case 16:v++,e.next=14;break;case 19:T=0,D=g;case 20:if(!(T<D.length)){e.next=32;break}return x=D[T],e.t1=i,e.t2=x.filename,e.next=26,l(x);case 26:e.t3=e.sent,e.t4={filename:e.t2,content:e.t3},e.t1.push.call(e.t1,e.t4);case 29:T++,e.next=20;break;case 32:return e.abrupt("return",i);case 35:if(e.prev=35,e.t5=e.catch(0),U.error(e.t5),!e.t5.details){e.next=42;break}return e.abrupt("return","\n      "+e.t5.message+":\n      \n      "+e.t5.details+"\n      ");case 42:if(!e.t5.errors){e.next=46;break}return e.abrupt("return",e.t5.errors.map((function(e){return e.message+": \n"+e.details})).join("\n"));case 46:return e.abrupt("return",e.t5.message);case 47:case"end":return e.stop()}}),e,null,[[0,35]])})))).apply(this,arguments)}var H="loadingContainer_XH7T";function J(e){var t=e.color,n=e.height;return i.createElement("div",{className:H,style:{color:t,height:n}},i.createElement("div",null,"Loading..."))}var K=n(13456),B=n(29237),Z=n(74699),X=n(62654),ee=n.n(X),te=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","definitions":{"Types.Config":{"description":"Represents the root YAML schema for the config file.","additionalProperties":false,"type":"object","properties":{"schema":{"$ref":"#/definitions/Types.InstanceOrArray","description":"A pointer(s) to your GraphQL schema. This schema will be the base schema for all your outputs.\\nYou can use one of the following:\\n\\n- URL pointing to a GraphQL endpoint\\n- Path to a local `.json` file\\n- Path to a local `.graphql` file\\n- Glob expression pointing to multiple `.graphql` files\\n- Path to a local code file (for example: `.js`) that exports `GraphQLSchema` object\\n- Inline string containing GraphQL SDL schema definition\\n\\nYou can specify either a single schema, or multiple, and GraphQL Code Generator will merge the schemas into a single schema.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/schema-field"},"require":{"$ref":"#/definitions/Types.RequireExtension","description":"A path to a file which defines custom Node.JS require() handlers for custom file extensions.\\nThis is essential if the code generator has to go through files which require other files in an unsupported format (by default).\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/require-field\\nSee more information about require.extensions: https://gist.github.com/jamestalmage/df922691475cff66c7e6.\\n\\nNote: values that specified in your .yml file will get loaded after loading the config .yml file."},"customFetch":{"description":"Name for a library that implements `fetch`.\\nUse this to tell codegen to use that to fetch schemas in a custom way.","type":"string"},"documents":{"$ref":"#/definitions/Types.InstanceOrArray_1","description":"A pointer(s) to your GraphQL documents: query, mutation, subscription and fragment. These documents will be loaded into for all your output files.\\nYou can use one of the following:\\n\\n- Path to a local `.graphql` file\\n- Path to a code file (for example: `.js` or `.tsx`) containing GraphQL operation strings.\\n- Glob expression pointing to multiple `.graphql` files\\n- Glob expression pointing to multiple code files\\n- Inline string containing GraphQL SDL operation definition\\n\\nYou can specify either a single file, or multiple.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/documents-field"},"config":{"$ref":"#/definitions/Types.PluginConfig","description":"Configuration object containing key => value that will be passes to the plugins.\\nSpecifying configuration in this level of your configuration file will pass it to all plugins, in all outputs.\\n\\nThe options may vary depends on what plugins you are using.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/config-field"},"generates":{"description":"A map where the key represents an output path for the generated code and the value represents a set of options which are relevant for that specific file.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/codegen-config","type":"object","additionalProperties":{"$ref":"#/definitions/Types.ConfiguredOutput"}},"overwrite":{"description":"A flag to overwrite files if they already exist when generating code (`true` by default).\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/codegen-config","type":"boolean"},"watch":{"description":"A flag to trigger codegen when there are changes in the specified GraphQL schemas.\\n\\nYou can either specify a boolean to turn it on/off or specify an array of glob patterns to add custom files to the watch.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/development-workflow#watch-mode","anyOf":[{"type":"array","items":{"type":"string"}},{"type":["string","boolean"]}]},"watchConfig":{"description":"Allows overriding the behavior of watch to use stat polling over native file watching support.\\n\\nConfig fields have the same defaults and sematics as the identically named ones for chokidar.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/development-workflow#watch-mode","type":"object","properties":{"usePolling":{"type":"boolean"},"interval":{"type":"number"}}},"silent":{"description":"A flag to suppress printing errors when they occur.","type":"boolean"},"errorsOnly":{"description":"A flag to print only errors.","type":"boolean"},"pluginLoader":{"$ref":"#/definitions/Types.PackageLoaderFn","description":"If you are using the programmatic API in a browser environment, you can override this configuration to load your plugins in a way different than require."},"pluginContext":{"description":"Additional context passed to plugins","type":"object","additionalProperties":{}},"pluckConfig":{"description":"Allows you to override the configuration for `@graphql-tools/graphql-tag-pluck`, the tool that extracts your GraphQL operations from your code files.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/documents-field#graphql-tag-pluck","type":"object","properties":{"modules":{"$ref":"#/definitions/Array","description":"An array of package name and identifier that will be used to track down your gql usages and imports. Use this if your code files imports gql from another library or you have a custom gql tag. identifier is the named export, so don\'t provide it if the tag function is imported as default."},"magicComment":{"description":"Configures the magic GraphQL comments to look for. The default is `GraphQL`.","type":"string"},"globalIdentifier":{"description":"Overrides the name of the default GraphQL name identifier.","type":"string"}}},"hooks":{"$ref":"#/definitions/Partial","description":"Specifies scripts to run when events are happening in the codegen core.\\nHooks defined on that level will effect all output files.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/lifecycle-hooks"}}},"ReactQueryRawPluginConfig":{"description":"This plugin generates `React-Query` Hooks with TypeScript typings.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.","type":"object","properties":{"fetcher":{"description":"Customize the fetcher you wish to use in the generated file. React-Query is agnostic to the data-fetcing layer, so you should provide it, or use a custom one.\\n\\nThe following options are available to use:\\n- \'fetch\' - requires you to specify endpoint and headers on each call, and uses `fetch` to do the actual http call.\\n- `{ endpoint: string, fetchParams: RequestInit }`: hardcode your endpoint and fetch options into the generated output, using the environment `fetch` method. You can also use `process.env.MY_VAR` as endpoint or header value.\\n- `file#identifier` - You can use custom fetcher method that should implement the exported `ReactQueryFetcher` interface. Example: `./my-fetcher#myCustomFetcher`.\\n- `graphql-request`: Will generate each hook with `client` argument, where you should pass your own `GraphQLClient` (created from `graphql-request`).","anyOf":[{"type":"object","properties":{"endpoint":{"type":"string"},"fetchParams":{"$ref":"#/definitions/Record"}}},{"type":"object","properties":{"func":{"type":"string"},"isReactHook":{"type":"boolean"}}},{"type":"string"}]},"exposeDocument":{"description":"For each generate query hook adds `document` field with a\\ncorrespoding GraphQL query. Useful for `queryClient.fetchQuery`. Example:\\nqueryClient.fetchQuery(\\nuseUserDetailsQuery.getKey(variables),\\n() => gqlRequest(useUserDetailsQuery.document, variables),\\n)\\nDefault value: \\"false\\"","type":"boolean"},"exposeQueryKeys":{"description":"For each generate query hook adds getKey(variables: QueryVariables) function. Useful for cache updates. Example:\\nconst query = useUserDetailsQuery(...);\\nconst key = useUserDetailsQuery.getKey({id: theUsersId});\\n// use key in a cache update after a mutation\\nDefault value: \\"false\\"","type":"boolean"},"errorType":{"description":"Changes the default \\"TError\\" generic type.\\nDefault value: \\"unknown\\"","type":"string"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"RTKConfig":{"type":"object","properties":{"importBaseApiFrom":{"description":"Define where to import the base api to inject endpoints into","type":"string"},"exportHooks":{"description":"Whether to export React Hooks from the generated api. Enable only when using the `\\"@reduxjs/toolkit/query/react\\"` import of `createApi`\\nDefault value: \\"false\\"","type":"boolean"}}},"RawGenericSdkPluginConfig":{"description":"This plugin generate a generic SDK (without any Requester implemented), allow you to easily customize the way you fetch your data, without loosing the strongly-typed integration.","type":"object","properties":{"usingObservableFrom":{"description":"usingObservableFrom: \\"import Observable from \'zen-observable\';\\"\\nOR\\nusingObservableFrom: \\"import { Observable } from \'rxjs\';\\"","type":"string"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"ApolloClientHelpersConfig":{"type":"object","properties":{"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"requireKeyFields":{"type":"boolean","description":"Remove optional sign from all `keyFields` fields.\\nDefault value: \\"false\\""},"requirePoliciesForAllTypes":{"type":"boolean","description":"Remove optional sign from all generated keys of the root TypePolicy.\\nDefault value: \\"false\\""}}},"AddPluginConfig":{"type":"object","properties":{"placement":{"description":"Allow you to choose where to add the content.\\nDefault value: \\"prepend\\"","enum":["append","content","prepend"],"type":"string"},"content":{"description":"The actual content you wish to add, either a string or array of strings.\\nYou can also specify a path to a local file and the content if it will be loaded by codegen.","anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]}}},"TimePluginConfig":{"type":"object","properties":{"format":{"description":"Customize the Moment format of the output time.\\nDefault value: \\"YYYY-MM-DDTHH:mm:ssZ\\"","type":"string"},"message":{"description":"Customize the comment message\\nDefault value: \\"\'Generated on\'\\"","type":"string"}}},"TypeScriptPluginConfig":{"description":"This plugin generates the base TypeScript types, based on your GraphQL schema.\\n\\nThe types generated by this plugin are simple, and refers to the exact structure of your schema, and it\'s used as the base types for other plugins (such as `typescript-operations` / `typescript-resolvers`)","type":"object","properties":{"avoidOptionals":{"description":"This will cause the generator to avoid using TypeScript optionals (`?`) on types,\\nso the following definition: `type A { myField: String }` will output `myField: Maybe<string>`\\ninstead of `myField?: Maybe<string>`.\\nDefault value: \\"false\\"","anyOf":[{"$ref":"#/definitions/AvoidOptionalsConfig"},{"type":"boolean"}]},"constEnums":{"description":"Will prefix every generated `enum` with `const`, you can read more about const enums here: https://www.typescriptlang.org/docs/handbook/enums.html.\\nDefault value: \\"false\\"","type":"boolean"},"enumsAsTypes":{"description":"Generates enum as TypeScript `type` instead of `enum`. Useful it you wish to generate `.d.ts` declaration file instead of `.ts`\\nDefault value: \\"false\\"","type":"boolean"},"numericEnums":{"description":"Controls whether to preserve typescript enum values as numbers\\nDefault value: \\"false\\"","type":"boolean"},"futureProofEnums":{"description":"This option controls whether or not a catch-all entry is added to enum type definitions for values that may be added in the future. You also have to set `enumsAsTypes` to true if you wish to use this option.\\nThis is useful if you are using `relay`.\\nDefault value: \\"false\\"","type":"boolean"},"futureProofUnions":{"description":"This option controls whether or not a catch-all entry is added to union type definitions for values that may be added in the future.\\nThis is useful if you are using `relay`.\\nDefault value: \\"false\\"","type":"boolean"},"enumsAsConst":{"description":"Generates enum as TypeScript `const assertions` instead of `enum`. This can even be used to enable enum-like patterns in plain JavaScript code if you choose not to use TypeScript\u2019s enum construct.\\nDefault value: \\"false\\"","type":"boolean"},"onlyOperationTypes":{"description":"This will cause the generator to emit types for operations only (basically only enums and scalars).\\nInteracts well with `preResolveTypes: true`\\nDefault value: \\"false\\"","type":"boolean"},"immutableTypes":{"description":"Generates immutable types by adding `readonly` to properties and uses `ReadonlyArray`.\\nDefault value: \\"false\\"","type":"boolean"},"maybeValue":{"description":"Allow to override the type value of `Maybe`.\\nDefault value: \\"T | null\\"","type":"string"},"noExport":{"description":"Set to `true` in order to generate output without `export` modifier.\\nThis is useful if you are generating `.d.ts` file and want it to be globally available.\\nDefault value: \\"false\\"","type":"boolean"},"disableDescriptions":{"description":"Set the value to `true` in order to disable all description generation.\\nDefault value: \\"false\\"","type":"boolean"},"useImplementingTypes":{"description":"When a GraphQL interface is used for a field, this flag will use the implementing types, instead of the interface itself.\\nDefault value: \\"false\\"","type":"boolean"},"wrapEntireFieldDefinitions":{"type":"boolean","description":"Set the to `true` in order to wrap field definitions with `EntireFieldWrapper`.\\nThis is useful to allow return types such as Promises and functions for fields.\\nDiffers from `wrapFieldDefinitions` in that this wraps the entire field definition if ie. the field is an Array, while\\n`wrapFieldDefinitions` will wrap every single value inside the array.\\nDefault value: \\"true\\""},"entireFieldWrapperValue":{"type":"string","description":"Allow to override the type value of `EntireFieldWrapper`. This wrapper applies outside of Array and Maybe\\nunlike `fieldWrapperValue`, that will wrap the inner type.\\nDefault value: \\"T | Promise<T> | (() => T | Promise<T>)\\""},"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema.\\nYou can also map the entire enum to an external type by providing a string that of `module#type`."},"declarationKind":{"description":"Overrides the default output for various GraphQL elements.","anyOf":[{"$ref":"#/definitions/DeclarationKindConfig"},{"enum":["abstract class","class","interface","type"],"type":"string"}]},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"fieldWrapperValue":{"description":"Allow you to add wrapper for field type, use T as the generic value. Make sure to set `wrapFieldDefinitions` to `true` in order to make this flag work.\\nDefault value: \\"T\\"","type":"string"},"wrapFieldDefinitions":{"description":"Set the to `true` in order to wrap field definitions with `FieldWrapper`.\\nThis is useful to allow return types such as Promises and functions.\\nDefault value: \\"false\\"","type":"boolean"},"ignoreEnumValuesFromSchema":{"description":"This will cause the generator to ignore enum values defined in GraphQLSchema\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"TypeScriptDocumentsPluginConfig":{"description":"This plugin generates TypeScript types based on your GraphQLSchema *and* your GraphQL operations and fragments.\\nIt generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.\\n\\nNote: In most configurations, this plugin requires you to use `typescript as well, because it depends on its base types.","type":"object","properties":{"arrayInputCoercion":{"description":"The [GraphQL spec]{@link https://spec.graphql.org/draft/#sel-FAHjBJFCAACE_Gh7d}\\nallows arrays and a single primitive value for list input. This allows to\\ndeactivate that behavior to only accept arrays instead of single values. If\\nset to `false`, the definition: `query foo(bar: [Int!]!): Foo` will output\\n`bar: Array<Int>` instead of `bar: Array<Int> | Int` for the variable part.\\nDefault value: \\"true\\"","type":"boolean"},"avoidOptionals":{"description":"This will cause the generator to avoid using TypeScript optionals (`?`) on types,\\nso the following definition: `type A { myField: String }` will output `myField: Maybe<string>`\\ninstead of `myField?: Maybe<string>`.\\nDefault value: \\"false\\"","anyOf":[{"$ref":"#/definitions/AvoidOptionalsConfig"},{"type":"boolean"}]},"immutableTypes":{"description":"Generates immutable types by adding `readonly` to properties and uses `ReadonlyArray`.\\nDefault value: \\"false\\"","type":"boolean"},"flattenGeneratedTypes":{"description":"Flatten fragment spread and inline fragments into a simple selection set before generating.\\nDefault value: \\"false\\"","type":"boolean"},"noExport":{"description":"Set to `true` in order to generate output without `export` modifier.\\nThis is useful if you are generating `.d.ts` file and want it to be globally available.\\nDefault value: \\"false\\"","type":"boolean"},"globalNamespace":{"type":"boolean"},"addOperationExport":{"type":"boolean","description":"Add const export of the operation name to output file. Pay attention that the file should be `d.ts`.\\nYou can combine it with `near-operation-file preset` and therefore the types will be generated along with graphql file. Then you need to set extension in `presetConfig` to be `.gql.d.ts` and by that you can import `gql` file in `ts` files.\\nIt will allow you to get everything with one import: ```import { GetClient, GetClientQuery, GetClientQueryVariables, } from \\"./GetClient.gql\\";```.\\nDefault value: \\"false\\""},"preResolveTypes":{"description":"Avoid using `Pick` and resolve the actual primitive type of all selection set.\\nDefault value: \\"false\\"","type":"boolean"},"skipTypeNameForRoot":{"description":"Avoid adding `__typename` for root types. This is ignored when a selection explictly specifies `__typename`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"exportFragmentSpreadSubTypes":{"description":"If set to true, it will export the sub-types created in order to make it easier to access fields declared under fragment spread.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema.\\nYou can also map the entire enum to an external type by providing a string that of `module#type`."},"declarationKind":{"description":"Overrides the default output for various GraphQL elements.","anyOf":[{"$ref":"#/definitions/DeclarationKindConfig"},{"enum":["abstract class","class","interface","type"],"type":"string"}]},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"fieldWrapperValue":{"description":"Allow you to add wrapper for field type, use T as the generic value. Make sure to set `wrapFieldDefinitions` to `true` in order to make this flag work.\\nDefault value: \\"T\\"","type":"string"},"wrapFieldDefinitions":{"description":"Set the to `true` in order to wrap field definitions with `FieldWrapper`.\\nThis is useful to allow return types such as Promises and functions.\\nDefault value: \\"false\\"","type":"boolean"},"onlyOperationTypes":{"description":"This will cause the generator to emit types for operations only (basically only enums and scalars)\\nDefault value: \\"false\\"","type":"boolean"},"ignoreEnumValuesFromSchema":{"description":"This will cause the generator to ignore enum values defined in GraphQLSchema\\nDefault value: \\"false\\"","type":"boolean"},"wrapEntireFieldDefinitions":{"type":"boolean","description":"Set the to `true` in order to wrap field definitions with `EntireFieldWrapper`.\\nThis is useful to allow return types such as Promises and functions for fields.\\nDiffers from `wrapFieldDefinitions` in that this wraps the entire field definition if ie. the field is an Array, while\\n`wrapFieldDefinitions` will wrap every single value inside the array.\\nDefault value: \\"true\\""},"entireFieldWrapperValue":{"type":"string","description":"Allow to override the type value of `EntireFieldWrapper`. This wrapper applies outside of Array and Maybe\\nunlike `fieldWrapperValue`, that will wrap the inner type.\\nDefault value: \\"T | Promise<T> | (() => T | Promise<T>)\\""},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"CSharpResolversPluginRawConfig":{"description":"This plugin generates C# `class` identifier for your schema types.","type":"object","properties":{"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema."},"namespaceName":{"description":"Allow you to customize the namespace name.\\nDefault value: \\"GraphQLCodeGen\\"","type":"string"},"className":{"description":"Allow you to customize the parent class name.\\nDefault value: \\"Types\\"","type":"string"},"listType":{"description":"Allow you to customize the list type\\nDefault value: \\"IEnumerable\\"","type":"string"},"emitRecords":{"description":"Emit C# 9.0+ records instead of classes\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"CSharpOperationsRawPluginConfig":{"description":"This plugin generates C# `class` based on your GraphQL operations.","type":"object","properties":{"namespaceName":{"description":"Allow you to customize the namespace name.\\nDefault value: \\"GraphQLCodeGen\\"","type":"string"},"namedClient":{"description":"Defined the global value of `namedClient`.","type":"string"},"querySuffix":{"description":"Allows to define a custom suffix for query operations.\\nDefault value: \\"GQL\\"","type":"string"},"mutationSuffix":{"description":"Allows to define a custom suffix for mutation operations.\\nDefault value: \\"GQL\\"","type":"string"},"subscriptionSuffix":{"description":"Allows to define a custom suffix for Subscription operations.\\nDefault value: \\"GQL\\"","type":"string"},"typesafeOperation":{"description":"Allows to generate operation methods with class definitions for request/response parameters\\nDefault value: \\"false\\"","type":"boolean"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"SchemaASTConfig":{"description":"This plugin prints the merged schema as string. If multiple schemas are provided, they will be merged and printed as one schema.","type":"object","properties":{"includeDirectives":{"description":"Include directives to Schema output.\\nDefault value: \\"false\\"","type":"boolean"},"commentDescriptions":{"description":"Set to true in order to print description as comments (using # instead of \\"\\"\\")\\nDefault value: \\"false\\"","type":"boolean"},"sort":{"description":"Set to true in order get the schema lexicographically sorted before printed.\\nDefault value: \\"false\\"","type":"boolean"},"federation":{"type":"boolean"}}},"TypeGraphQLPluginConfig":{"type":"object","properties":{"decoratorName":{"$ref":"#/definitions/Partial_1","description":"allow overriding of TypeGraphQL decorator types\\nDefault value: \\"`{ type: \'ObjectType\', interface: \'InterfaceType\', arguments: \'ArgsType\', field: \'Field\', input: \'InputType\' }`\\""},"decorateTypes":{"description":"Speciies the objects that will have TypeGraphQL decorators prepended to them, by name. Non-matching types will still be output, but without decorators. If not set, all types will be decorated.","type":"string[]"},"avoidOptionals":{"description":"This will cause the generator to avoid using TypeScript optionals (`?`) on types,\\nso the following definition: `type A { myField: String }` will output `myField: Maybe<string>`\\ninstead of `myField?: Maybe<string>`.\\nDefault value: \\"false\\"","anyOf":[{"$ref":"#/definitions/AvoidOptionalsConfig"},{"type":"boolean"}]},"constEnums":{"description":"Will prefix every generated `enum` with `const`, you can read more about const enums here: https://www.typescriptlang.org/docs/handbook/enums.html.\\nDefault value: \\"false\\"","type":"boolean"},"enumsAsTypes":{"description":"Generates enum as TypeScript `type` instead of `enum`. Useful it you wish to generate `.d.ts` declaration file instead of `.ts`\\nDefault value: \\"false\\"","type":"boolean"},"numericEnums":{"description":"Controls whether to preserve typescript enum values as numbers\\nDefault value: \\"false\\"","type":"boolean"},"futureProofEnums":{"description":"This option controls whether or not a catch-all entry is added to enum type definitions for values that may be added in the future. You also have to set `enumsAsTypes` to true if you wish to use this option.\\nThis is useful if you are using `relay`.\\nDefault value: \\"false\\"","type":"boolean"},"futureProofUnions":{"description":"This option controls whether or not a catch-all entry is added to union type definitions for values that may be added in the future.\\nThis is useful if you are using `relay`.\\nDefault value: \\"false\\"","type":"boolean"},"enumsAsConst":{"description":"Generates enum as TypeScript `const assertions` instead of `enum`. This can even be used to enable enum-like patterns in plain JavaScript code if you choose not to use TypeScript\u2019s enum construct.\\nDefault value: \\"false\\"","type":"boolean"},"onlyOperationTypes":{"description":"This will cause the generator to emit types for operations only (basically only enums and scalars).\\nInteracts well with `preResolveTypes: true`\\nDefault value: \\"false\\"","type":"boolean"},"immutableTypes":{"description":"Generates immutable types by adding `readonly` to properties and uses `ReadonlyArray`.\\nDefault value: \\"false\\"","type":"boolean"},"maybeValue":{"description":"Allow to override the type value of `Maybe`.\\nDefault value: \\"T | null\\"","type":"string"},"noExport":{"description":"Set to `true` in order to generate output without `export` modifier.\\nThis is useful if you are generating `.d.ts` file and want it to be globally available.\\nDefault value: \\"false\\"","type":"boolean"},"disableDescriptions":{"description":"Set the value to `true` in order to disable all description generation.\\nDefault value: \\"false\\"","type":"boolean"},"useImplementingTypes":{"description":"When a GraphQL interface is used for a field, this flag will use the implementing types, instead of the interface itself.\\nDefault value: \\"false\\"","type":"boolean"},"wrapEntireFieldDefinitions":{"type":"boolean","description":"Set the to `true` in order to wrap field definitions with `EntireFieldWrapper`.\\nThis is useful to allow return types such as Promises and functions for fields.\\nDiffers from `wrapFieldDefinitions` in that this wraps the entire field definition if ie. the field is an Array, while\\n`wrapFieldDefinitions` will wrap every single value inside the array.\\nDefault value: \\"true\\""},"entireFieldWrapperValue":{"type":"string","description":"Allow to override the type value of `EntireFieldWrapper`. This wrapper applies outside of Array and Maybe\\nunlike `fieldWrapperValue`, that will wrap the inner type.\\nDefault value: \\"T | Promise<T> | (() => T | Promise<T>)\\""},"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema.\\nYou can also map the entire enum to an external type by providing a string that of `module#type`."},"declarationKind":{"description":"Overrides the default output for various GraphQL elements.","anyOf":[{"$ref":"#/definitions/DeclarationKindConfig"},{"enum":["abstract class","class","interface","type"],"type":"string"}]},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"fieldWrapperValue":{"description":"Allow you to add wrapper for field type, use T as the generic value. Make sure to set `wrapFieldDefinitions` to `true` in order to make this flag work.\\nDefault value: \\"T\\"","type":"string"},"wrapFieldDefinitions":{"description":"Set the to `true` in order to wrap field definitions with `FieldWrapper`.\\nThis is useful to allow return types such as Promises and functions.\\nDefault value: \\"false\\"","type":"boolean"},"ignoreEnumValuesFromSchema":{"description":"This will cause the generator to ignore enum values defined in GraphQLSchema\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"TypeScriptFilesModulesPluginConfig":{"description":"This plugin generates TypeScript typings for `.graphql` files containing GraphQL documents, which later on can be consumed using [`graphql-tag/loader`](https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader) or use `string` types if you will use the operations as raw strings, and get type-check and type-safety for your imports. This means that any time you import objects from `.graphql` files, your IDE will provide auto-complete.\\n\\nThis plugin also handles `.graphql` files containing multiple GraphQL documents, and name the imports according to the operation name.\\n\\n> \u26a0 Fragments are not generated with named imports, only as default imports, due to `graphql-tag/loader` behavior.","type":"object","properties":{"modulePathPrefix":{"description":"Allows specifying a module definition path prefix to provide distinction\\nbetween generated types.\\nDefault value: \\"\\"","type":"string"},"relativeToCwd":{"description":"By default, only the filename is being used to generate TS module declarations. Setting this to `true` will generate it with a full path based on the CWD.\\nDefault value: \\"false\\"","type":"boolean"},"prefix":{"description":"By default, a wildcard is being added as prefix, you can change that to a custom prefix\\nDefault value: \\"*\\\\/\\"","type":"string"},"type":{"description":"By default, the named exports will have a type `DocumentNode`. Change this to \\"string\\" if you only use raw strings.\\nDefault value: \\"DocumentNode\\"","enum":["DocumentNode","string"],"type":"string"}}},"NamedOperationsObjectPluginConfig":{"type":"object","properties":{"identifierName":{"description":"Allow you to customize the name of the exported identifier\\nDefault value: \\"namedOperations\\"","type":"string"},"useConsts":{"description":"Will generate a const string instead of regular string.\\nDefault value: \\"false\\"","type":"boolean"}}},"RawGraphQLRequestPluginConfig":{"description":"This plugin generates [`graphql-request`](https://www.npmjs.com/package/graphql-request) ready-to-use SDK, which is fully-typed.","type":"object","properties":{"rawRequest":{"description":"By default the `request` method return the `data` or `errors` key from the response. If you need to access the `extensions` key you can use the `rawRequest` method.\\nDefault value: \\"false\\"","type":"boolean"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"CompatibilityPluginRawConfig":{"description":"If you are migrating from <1.0, we created a new plugin called `typescript-compatibility` that generates backward compatibility for the `typescript-operations` and `typescript-react-apollo` plugins.\\n\\nIt generates types that are pointing to the new form of types. It supports _most_ of the use-cases.","type":"object","properties":{"noNamespaces":{"description":"Does not generate TypeScript `namespace`s and uses the operation name as prefix.\\nDefault value: \\"false\\"","type":"boolean"},"strict":{"description":"Make sure to generate code that compatible with TypeScript strict mode.\\nDefault value: \\"false\\"","type":"boolean"},"preResolveTypes":{"description":"Avoid using `Pick` in `typescript-operations` and make sure to optimize this package as well.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"TypeScriptMongoPluginConfig":{"type":"object","properties":{"dbTypeSuffix":{"description":"Customize the suffix for the generated GraphQL `type`s.\\nDefault value: \\"DbObject\\"","type":"string"},"dbInterfaceSuffix":{"description":"Customize the suffix for the generated GraphQL `interface`s.\\nDefault value: \\"DbObject\\"","type":"string"},"objectIdType":{"description":"Customize the type of `_id` fields. You can either specify a type name, or specify `module#type`.\\nDefault value: \\"mongodb#ObjectId\\"","type":"string"},"idFieldName":{"description":"Customize the name of the id field generated after using `@id` directive over a GraphQL field.\\nDefault value: \\"_id\\"","type":"string"},"enumsAsString":{"description":"Replaces generated `enum` values with `string`.\\nDefault value: \\"true\\"","type":"boolean"},"avoidOptionals":{"description":"This will cause the generator to avoid using TypeScript optionals (`?`),\\nso the following definition: `type A { myField: String }` will output `myField: Maybe<string>`\\ninstead of `myField?: Maybe<string>`.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"TypeScriptResolversPluginConfig":{"description":"This plugin generates TypeScript signature for `resolve` functions of your GraphQL API.\\nYou can use this plugin a to generate simple resolvers signature based on your GraphQL types, or you can change it\'s behavior be providing custom model types (mappers).\\n\\nYou can find a blog post explaining the usage of this plugin here: https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen","type":"object","properties":{"useIndexSignature":{"description":"Adds an index signature to any generates resolver.\\nDefault value: \\"false\\"","type":"boolean"},"noSchemaStitching":{"description":"Disables Schema Stitching support.\\n\\nNote: The default behavior will be reversed in the next major release. Support for Schema Stitching will be disabled by default.\\nDefault value: \\"false\\"","type":"boolean"},"wrapFieldDefinitions":{"description":"Set to `true` in order to wrap field definitions with `FieldWrapper`.\\nThis is useful to allow return types such as Promises and functions. Needed for\\ncompatibility with `federation: true` when\\nDefault value: \\"true\\"","type":"boolean"},"customResolveInfo":{"description":"You can provide your custom GraphQLResolveInfo instead of the default one from graphql-js\\nDefault value: \\"graphql#GraphQLResolveInfo\\"","type":"string"},"customResolverFn":{"description":"You can provide your custom ResolveFn instead the default. It has to be a type that uses the generics <TResult, TParent, TContext, TArgs>\\nDefault value: \\"(parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult\\"","type":"string"},"allowParentTypeOverride":{"description":"Allow you to override the `ParentType` generic in each resolver, by avoid enforcing the base type of the generated generic type.\\n\\nThis will generate `ParentType = Type` instead of `ParentType extends Type = Type` in each resolver.","type":"boolean"},"optionalInfoArgument":{"description":"Sets `info` argument of resolver function to be optional field. Useful for testing.","type":"boolean"},"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"contextType":{"description":"Use this configuration to set a custom type for your `context`, and it will\\neffect all the resolvers, without the need to override it using generics each time.\\nIf you wish to use an external type and import it from another file, you can use `add` plugin\\nand add the required `import` statement, or you can use a `module#type` syntax.","type":"string"},"fieldContextTypes":{"$ref":"#/definitions/Array_1","description":"Use this to set a custom type for a specific field `context`.\\nIt will only affect the targeted resolvers.\\nYou can either use `Field.Path#ContextTypeName` or `Field.Path#ExternalFileName#ContextTypeName`"},"rootValueType":{"description":"Use this configuration to set a custom type for the `rootValue`, and it will\\neffect resolvers of all root types (Query, Mutation and Subscription), without the need to override it using generics each time.\\nIf you wish to use an external type and import it from another file, you can use `add` plugin\\nand add the required `import` statement, or you can use both `module#type` or `module#namespace#type` syntax.","type":"string"},"mapperTypeSuffix":{"description":"Adds a suffix to the imported names to prevent name clashes.","type":"string"},"mappers":{"description":"Replaces a GraphQL type usage with a custom type, allowing you to return custom object from\\nyour resolvers.\\nYou can use both `module#type` and `module#namespace#type` syntax.","type":"object","additionalProperties":{"type":"string"}},"defaultMapper":{"description":"Allow you to set the default mapper when it\'s not being override by `mappers` or generics.\\nYou can specify a type name, or specify a string in `module#type` or `module#namespace#type` format.\\nThe default value of mappers it the TypeScript type generated by `typescript` package.","type":"string"},"avoidOptionals":{"description":"This will cause the generator to avoid using optionals (`?`),\\nso all field resolvers must be implemented in order to avoid compilation errors.\\nDefault value: \\"false\\"","anyOf":[{"$ref":"#/definitions/AvoidOptionalsConfig"},{"type":"boolean"}]},"showUnusedMappers":{"description":"Warns about unused mappers.\\nDefault value: \\"true\\"","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema, supported\\nin this plugin because of the need for integration with `typescript` package.\\nSee documentation under `typescript` plugin for more information and examples."},"resolverTypeWrapperSignature":{"description":"Allow you to override `resolverTypeWrapper` definition.\\nDefault value: \\"Promise<T> | T\\"","type":"string"},"federation":{"description":"Supports Apollo Federation\\nDefault value: \\"false\\"","type":"boolean"},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"optionalResolveType":{"description":"Sets the `__resolveType` field as optional field.\\nDefault value: \\"false\\"","type":"boolean"},"immutableTypes":{"description":"Generates immutable types by adding `readonly` to properties and uses `ReadonlyArray`.\\nDefault value: \\"false\\"","type":"boolean"},"namespacedImportName":{"description":"Prefixes all GraphQL related generated types with that value, as namespaces import.\\nYou can use this featuere to allow seperation of plugins to different files.\\nDefault value: \\"\'\'\\"","type":"string"},"resolverTypeSuffix":{"description":"Suffix we add to each generated type resolver.\\nDefault value: \\"Resolvers\\"","type":"string"},"allResolversTypeName":{"description":"The type name to use when exporting all resolvers signature as unified type.\\nDefault value: \\"Resolvers\\"","type":"string"},"internalResolversPrefix":{"type":"string","description":"Defines the prefix value used for `__resolveType` and and `__isTypeOf` resolvers.\\nIf you are using `mercurius-js`, please set this field to empty string for better compatiblity.\\nDefault value: \\"\'__\'\\""},"onlyResolveTypeForInterfaces":{"type":"boolean","description":"Turning this flag to `true` will generate resolver siganture that has only `resolveType` for interfaces, forcing developers to write inherited type resolvers in the type itself.\\nDefault value: \\"false\\""},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"ApolloAngularRawPluginConfig":{"description":"This plugin generates Apollo services (`Query`, `Mutation` and `Subscription`) with TypeScript typings.\\n\\nIt will generate a strongly typed Angular service for every defined query, mutation or subscription. The generated Angular services are ready to inject and use within your Angular component.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nTo shed some more light regards this template, it\'s recommended to go through the this article: http://apollographql.com/docs/angular/basics/services.html , and to read the Code Generation with Apollo Angular: https://the-guild.dev/blog/apollo-angular-12","type":"object","properties":{"apolloAngularVersion":{"description":"Version of `apollo-angular` package\\nDefault value: \\"2\\"","type":"number"},"ngModule":{"description":"Allows to define `ngModule` as part of the plugin\'s config so it\'s globally available.","type":"string"},"namedClient":{"description":"Defined the global value of `namedClient`.","type":"string"},"serviceName":{"description":"Defined the global value of `serviceName`.","type":"string"},"serviceProvidedInRoot":{"description":"Defined the global value of `serviceProvidedInRoot`.","type":"boolean"},"serviceProvidedIn":{"description":"Define the Injector of the SDK class.","type":"string"},"sdkClass":{"description":"Set to `true` in order to generate a SDK service class that uses all generated services.\\nDefault value: \\"false\\"","type":"boolean"},"querySuffix":{"description":"Allows to define a custom suffix for query operations.\\nDefault value: \\"GQL\\"","type":"string"},"mutationSuffix":{"description":"Allows to define a custom suffix for mutation operations.\\nDefault value: \\"GQL\\"","type":"string"},"subscriptionSuffix":{"description":"Allows to define a custom suffix for Subscription operations.\\nDefault value: \\"GQL\\"","type":"string"},"apolloAngularPackage":{"description":"Allows to define a custom Apollo-Angular package to import types from.\\nDefault value: \\"\'apollo-angular\'\\"","type":"string"},"additionalDI":{"description":"Add additional dependency injections for generated services\\nDefault value: \\"\\"","type":"array","items":{"type":"string"}},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"UrqlRawPluginConfig":{"description":"This plugin generates `urql` (https://github.com/FormidableLabs/urql) components and HOC with TypeScript typings.","type":"object","properties":{"withComponent":{"description":"Customized the output by enabling/disabling the generated Component.\\nDefault value: \\"false\\"","type":"boolean"},"withHooks":{"description":"Customized the output by enabling/disabling the generated React Hooks.\\nDefault value: \\"true\\"","type":"boolean"},"urqlImportFrom":{"description":"You can specify module that exports components `Query`, `Mutation`, `Subscription` and HOCs\\nThis is useful for further abstraction of some common tasks (eg. error handling).\\nFilepath relative to generated file can be also specified.\\nDefault value: \\"urql\\"","type":"string"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"ReactApolloRawPluginConfig":{"description":"This plugin generates React Apollo components and HOC with TypeScript typings.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.","type":"object","properties":{"withComponent":{"description":"Customize the output by enabling/disabling the generated Component (deprecated since Apollo-Client v3). For more details: https://www.apollographql.com/docs/react/api/react/components/\\nDefault value: \\"false\\"","type":"boolean"},"withHOC":{"description":"Customize the output by enabling/disabling the HOC (deprecated since Apollo-Client v3). For more details: https://www.apollographql.com/docs/react/api/react/hoc/\\nDefault value: \\"false\\"","type":"boolean"},"withHooks":{"description":"Customized the output by enabling/disabling the generated React Hooks. For more details: https://www.apollographql.com/docs/react/api/react/hooks/\\nDefault value: \\"true\\"","type":"boolean"},"withMutationFn":{"description":"Customized the output by enabling/disabling the generated mutation function signature.\\nDefault value: \\"true\\"","type":"boolean"},"withRefetchFn":{"description":"Enable generating a function to be used with refetchQueries\\nDefault value: \\"false\\"","type":"boolean"},"apolloReactCommonImportFrom":{"description":"Customize the package where apollo-react common lib is loaded from.\\nDefault value: \\"@apollo/react-common\\"","type":"string"},"apolloReactComponentsImportFrom":{"description":"Customize the package where apollo-react component lib is loaded from.\\nDefault value: \\"@apollo/react-components\\"","type":"string"},"apolloReactHocImportFrom":{"description":"Customize the package where apollo-react HOC lib is loaded from.\\nDefault value: \\"@apollo/react-hoc\\"","type":"string"},"apolloReactHooksImportFrom":{"description":"Customize the package where apollo-react hooks lib is loaded from.\\nDefault value: \\"@apollo/react-hooks\\"","type":"string"},"componentSuffix":{"description":"You can specify a suffix that gets attached to the name of the generated component.\\nDefault value: \\"Component\\"","type":"string"},"reactApolloVersion":{"description":"Sets the version of react-apollo.\\nIf you are using the old (deprecated) package of `react-apollo`, please set this configuration to `2`.\\nIf you are using Apollo-Client v3, please set this to `3`.\\nDefault value: \\"3\\"","enum":[2,3],"type":"number"},"withResultType":{"description":"Customized the output by enabling/disabling the generated result type.\\nDefault value: \\"true\\"","type":"boolean"},"withMutationOptionsType":{"description":"Customized the output by enabling/disabling the generated mutation option type.\\nDefault value: \\"true\\"","type":"boolean"},"addDocBlocks":{"description":"Allows you to enable/disable the generation of docblocks in generated code.\\nSome IDE\'s (like VSCode) add extra inline information with docblocks, you can disable this feature if your preferred IDE does not.\\nDefault value: \\"true\\"","type":"boolean"},"defaultBaseOptions":{"type":"object","additionalProperties":{"type":"string"}},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"VueApolloRawPluginConfig":{"description":"This plugin generates","type":"object","properties":{"withCompositionFunctions":{"description":"Customized the output by enabling/disabling the generated Vue composition functions.\\nDefault value: \\"true\\"","type":"boolean"},"vueApolloComposableImportFrom":{"type":"string","description":"\\nDefault value: \\"\\""},"vueCompositionApiImportFrom":{"type":"string","description":"\\nDefault value: \\"\\""},"addDocBlocks":{"description":"Allows you to enable/disable the generation of docblocks in generated code.\\nSome IDE\'s (like VSCode) add extra inline information with docblocks, you can disable this feature if your preferred IDE does not.\\nDefault value: \\"true\\"","type":"boolean"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"VueApolloSmartOpsRawPluginConfig":{"description":"This plugin generates Vue Apollo Smart Query, Smart Subscription and mutation operation functions with\\nTypeScript typings.\\n\\nThis plugin relies on some helper functions and types from the `vue-apollo-smart-ops` package. That package also adds\\nsome optional functionality for improved error handling in Vue Apollo operations which can be configured in the\\ngenerated code from this plugin.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` -\\nand thus shares a similar configuration.","type":"object","properties":{"withSmartOperationFunctions":{"description":"Customize the output by enabling/disabling the generated Vue Apollo Smart Operations functions.\\nDefault value: \\"true\\"","type":"boolean"},"vueApolloOperationFunctionsImportFrom":{"description":"The `typescript-vue-apollo-smart-ops` plugin requires three functions that are used to define your\\nquery, subscription and mutation operation functions:\\n  - `createMutationFunction`\\n  - `createSmartQueryOptionsFunction`\\n  - `createSmartSubscriptionOptionsFunction`\\nBy default these functions are provided by the `vue-apollo-smart-ops` package, but you can substitute\\nyour own import path if you want to replace them with other implementations.\\nDefault value: \\"vue-apollo-smart-ops\\"","type":"string"},"vueApolloErrorType":{"description":"The operation functions generated by `typescript-vue-apollo-smart-ops` include some functionality for\\nerror handling. This configuration parameter allows you to customise the name of the error type that\\nwill be used. The default is to use `ApolloError` from the `apollo-client` package.\\nDefault value: \\"ApolloError\\"","type":"string"},"vueApolloErrorTypeImportFrom":{"description":"The operation functions generated by `typescript-vue-apollo-smart-ops` include some functionality for\\nerror handling. This configuration parameter allows you to customise the package where the error type\\nwill be imported from. The default is to use `ApolloError` from the `apollo-client` package.\\nDefault value: \\"vue-apollo-smart-ops\\"","type":"string"},"vueApolloErrorHandlerFunction":{"description":"The operation functions generated by `typescript-vue-apollo-smart-ops` include some functionality for\\nerror handling. You may supply an error handler function that will be called when an error occurs in\\na query, subscription or mutation operation. This function should implement the\\n`ApolloOperationErrorHandlerFunction` interface from `vue-apollo-smart-ops` package. You can\\nhave a custom handler in your app that shows a notification to the user, for example. If unspecified,\\nthis functionality will be disabled and errors handled (or not) by Vue Apollo in the normal way.\\nDefault value: \\"undefined\\"","type":"string"},"vueApolloErrorHandlerFunctionImportFrom":{"description":"The import path where `vueApolloErrorHandlerFunction` should be imported from. Can be a package name\\nor a local file path (anything that works in an import statement).\\nDefault value: \\"undefined\\"","type":"string"},"vueAppType":{"description":"The operation functions generated by `typescript-vue-apollo-smart-ops` include some functionality for\\nerror handling. When an error occurs, the Vue app instance is passed to the error handler. You can\\ncustomise the expected type of the app object. For example, a Nuxt.js app might use `NuxtApp` from\\n`@nuxt/types/app` instead. When unspecified, the default type is `Vue` from `vue/types/vue`.\\nDefault value: \\"undefined\\"","type":"string"},"vueAppTypeImportFrom":{"description":"The import path where `vueAppType` should be imported from. Can be a package name or a local file path\\n(anything that works in an import statement).\\nDefault value: \\"undefined\\"","type":"string"},"addDocBlocks":{"description":"Allows you to enable/disable the generation of docblocks in generated code.\\nSome IDE\'s (like VSCode) add extra inline information with docblocks, you can disable this feature if\\nyour preferred IDE does not.\\nDefault value: \\"true\\"","type":"boolean"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"VueUrqlRawPluginConfig":{"description":"This plugin generates `urql` (https://github.com/FormidableLabs/urql) composition functions with TypeScript typings.","type":"object","properties":{"withComposition":{"description":"Customized the output by enabling/disabling the generated Vue Composition functions.\\nDefault value: \\"true\\"","type":"boolean"},"urqlImportFrom":{"description":"You can specify module that exports components `Query`, `Mutation`, `Subscription`\\nThis is useful for further abstraction of some common tasks (eg. error handling).\\nFilepath relative to generated file can be also specified.\\nDefault value: \\"urql\\"","type":"string"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"StencilApolloRawPluginConfig":{"description":"This plugin generates Stencil Apollo functional components typings\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.","type":"object","properties":{"componentType":{"$ref":"#/definitions/StencilComponentType","description":"Customize the output of the plugin - you can choose to generate a Component class or a function component.\\nDefault value: \\"functional\\""},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"TypeScriptDocumentNodesRawPluginConfig":{"description":"This plugin generates TypeScript source (`.ts`) file from GraphQL files (`.graphql`).","type":"object","properties":{"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"namePrefix":{"description":"Adds prefix to the name\\nDefault value: \\"\\"","type":"string"},"nameSuffix":{"description":"Adds suffix to the name\\nDefault value: \\"\\"","type":"string"},"fragmentPrefix":{"description":"Adds prefix to the fragment variable\\nDefault value: \\"\\"","type":"string"},"fragmentSuffix":{"description":"Adds suffix to the fragment variable\\nDefault value: \\"\\"","type":"string"},"noGraphQLTag":{"description":"Deprecated. Changes the documentMode to `documentNode`.\\nDefault value: \\"false\\"","type":"boolean"},"gqlImport":{"description":"Customize from which module will `gql` be imported from.\\nThis is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.\\nDefault value: \\"graphql-tag#gql\\"","type":"string"},"documentNodeImport":{"description":"Customize from which module will `DocumentNode` be imported from.\\nThis is useful if you want to use modules other than `graphql`, e.g. `@graphql-typed-document-node`.\\nDefault value: \\"graphql#DocumentNode\\"","type":"string"},"noExport":{"description":"Set this configuration to `true` if you wish to tell codegen to generate code with no `export` identifier.\\nDefault value: \\"false\\"","type":"boolean"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"documentVariablePrefix":{"description":"Changes the GraphQL operations variables prefix.\\nDefault value: \\"\\"","type":"string"},"documentVariableSuffix":{"description":"Changes the GraphQL operations variables suffix.\\nDefault value: \\"Document\\"","type":"string"},"fragmentVariablePrefix":{"description":"Changes the GraphQL fragments variables prefix.\\nDefault value: \\"\\"","type":"string"},"fragmentVariableSuffix":{"description":"Changes the GraphQL fragments variables suffix.\\nDefault value: \\"FragmentDoc\\"","type":"string"},"documentMode":{"$ref":"#/definitions/DocumentMode","description":"Declares how DocumentNode are created:\\n- `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client\\n- `documentNode`: document nodes will be generated as objects when we generate the templates.\\n- `documentNodeImportFragments`: Similar to documentNode except it imports external fragments instead of embedding them.\\n- `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`\\n\\nNote that some plugins (like `typescript-graphql-request`) also supports `string` for this parameter.\\nDefault value: \\"graphQLTag\\""},"optimizeDocumentNode":{"description":"If you are using `documentNode: documentMode | documentNodeImportFragments`, you can set this to `true` to apply document optimizations for your GraphQL document.\\nThis will remove all \\"loc\\" and \\"description\\" fields from the compiled document, and will remove all empty arrays (such as `directives`, `arguments` and `variableDefinitions`).\\nDefault value: \\"true\\"","type":"boolean"},"importOperationTypesFrom":{"description":"This config is used internally by presets, but you can use it manually to tell codegen to prefix all base types that it\'s using.\\nThis is useful if you wish to generate base types from `typescript-operations` plugin into a different file, and import it from there.\\nDefault value: \\"\\"","type":"string"},"importDocumentNodeExternallyFrom":{"description":"This config should be used if `documentMode` is `external`. This has 2 usage:\\n- any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document\\n- \'near-operation-file\': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.\\nDefault value: \\"\\"","type":"string"},"pureMagicComment":{"description":"This config adds PURE magic comment to the static variables to enforce treeshaking for your bundler.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"JavaApolloAndroidPluginConfig":{"description":"This plugin and presets creates generated mappers and parsers for a complete type-safe GraphQL requests, for developers that uses Apollo Android runtime.","type":"object","properties":{"package":{"description":"Customize the Java package name for the generated operations. The default package name will be generated according to the output file path.","type":"string"},"typePackage":{"description":"Customize the Java package name for the types generated based on input types.","type":"string"},"fragmentPackage":{"description":"Customize the Java package name for the fragments generated classes.","type":"string"},"fileType":{"$ref":"#/definitions/FileType"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"JavaResolversPluginRawConfig":{"type":"object","properties":{"package":{"description":"Customize the Java package name. The default package name will be generated according to the output file path.","type":"string"},"mappers":{"description":"Allow you to replace specific GraphQL types with your custom model classes. This is useful when you want to make sure your resolvers returns the correct class.\\nThe default value is the values set by `defaultMapper` configuration.\\nYou can use a direct path to the package, or use `package#class` syntax to have it imported.","type":"object","additionalProperties":{"type":"string"}},"defaultMapper":{"description":"Sets the default mapper value in case it\'s not specified by `mappers`.\\nYou can use a direct path to the package, or use `package#class` syntax to have it imported.\\nThe default mapper is Java\'s `Object`.\\nDefault value: \\"Object\\"","type":"string"},"className":{"description":"Allow you to customize the parent class name.\\nDefault value: \\"Resolvers\\"","type":"string"},"listType":{"description":"Allow you to customize the list type.\\nDefault value: \\"Iterable\\"","type":"string"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"KotlinResolversPluginRawConfig":{"type":"object","properties":{"package":{"description":"Customize the Java package name. The default package name will be generated according to the output file path.","type":"string"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema."},"listType":{"description":"Allow you to customize the list type\\nDefault value: \\"Iterable\\"","type":"string"},"withTypes":{"description":"Allow you to enable generation for the types\\nDefault value: \\"false\\"","type":"boolean"},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"FlowPluginConfig":{"description":"This plugin generates Flow types based on your `GraphQLSchema`.\\n\\nIt generates types for your entire schema: types, input types, enum, interface, scalar and union.","type":"object","properties":{"useFlowExactObjects":{"description":"Generates Flow types as Exact types.\\nDefault value: \\"true\\"","type":"boolean"},"useFlowReadOnlyTypes":{"description":"Generates read-only Flow types\\nDefault value: \\"false\\"","type":"boolean"},"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema.\\nYou can also map the entire enum to an external type by providing a string that of `module#type`."},"declarationKind":{"description":"Overrides the default output for various GraphQL elements.","anyOf":[{"$ref":"#/definitions/DeclarationKindConfig"},{"enum":["abstract class","class","interface","type"],"type":"string"}]},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"fieldWrapperValue":{"description":"Allow you to add wrapper for field type, use T as the generic value. Make sure to set `wrapFieldDefinitions` to `true` in order to make this flag work.\\nDefault value: \\"T\\"","type":"string"},"wrapFieldDefinitions":{"description":"Set the to `true` in order to wrap field definitions with `FieldWrapper`.\\nThis is useful to allow return types such as Promises and functions.\\nDefault value: \\"false\\"","type":"boolean"},"onlyOperationTypes":{"description":"This will cause the generator to emit types for operations only (basically only enums and scalars)\\nDefault value: \\"false\\"","type":"boolean"},"ignoreEnumValuesFromSchema":{"description":"This will cause the generator to ignore enum values defined in GraphQLSchema\\nDefault value: \\"false\\"","type":"boolean"},"wrapEntireFieldDefinitions":{"type":"boolean","description":"Set the to `true` in order to wrap field definitions with `EntireFieldWrapper`.\\nThis is useful to allow return types such as Promises and functions for fields.\\nDiffers from `wrapFieldDefinitions` in that this wraps the entire field definition if ie. the field is an Array, while\\n`wrapFieldDefinitions` will wrap every single value inside the array.\\nDefault value: \\"true\\""},"entireFieldWrapperValue":{"type":"string","description":"Allow to override the type value of `EntireFieldWrapper`. This wrapper applies outside of Array and Maybe\\nunlike `fieldWrapperValue`, that will wrap the inner type.\\nDefault value: \\"T | Promise<T> | (() => T | Promise<T>)\\""},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"RawFlowResolversConfig":{"description":"This plugin generates resolvers signature based on your `GraphQLSchema`.\\n\\nIt generates types for your entire schema: types, input types, enum, interface, scalar and union.\\n\\nThis plugin requires you to use `@graphql-codegen/flow` as well, because it depends on it\'s types.","type":"object","properties":{"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"contextType":{"description":"Use this configuration to set a custom type for your `context`, and it will\\neffect all the resolvers, without the need to override it using generics each time.\\nIf you wish to use an external type and import it from another file, you can use `add` plugin\\nand add the required `import` statement, or you can use a `module#type` syntax.","type":"string"},"fieldContextTypes":{"$ref":"#/definitions/Array_1","description":"Use this to set a custom type for a specific field `context`.\\nIt will only affect the targeted resolvers.\\nYou can either use `Field.Path#ContextTypeName` or `Field.Path#ExternalFileName#ContextTypeName`"},"rootValueType":{"description":"Use this configuration to set a custom type for the `rootValue`, and it will\\neffect resolvers of all root types (Query, Mutation and Subscription), without the need to override it using generics each time.\\nIf you wish to use an external type and import it from another file, you can use `add` plugin\\nand add the required `import` statement, or you can use both `module#type` or `module#namespace#type` syntax.","type":"string"},"mapperTypeSuffix":{"description":"Adds a suffix to the imported names to prevent name clashes.","type":"string"},"mappers":{"description":"Replaces a GraphQL type usage with a custom type, allowing you to return custom object from\\nyour resolvers.\\nYou can use both `module#type` and `module#namespace#type` syntax.","type":"object","additionalProperties":{"type":"string"}},"defaultMapper":{"description":"Allow you to set the default mapper when it\'s not being override by `mappers` or generics.\\nYou can specify a type name, or specify a string in `module#type` or `module#namespace#type` format.\\nThe default value of mappers it the TypeScript type generated by `typescript` package.","type":"string"},"avoidOptionals":{"description":"This will cause the generator to avoid using optionals (`?`),\\nso all field resolvers must be implemented in order to avoid compilation errors.\\nDefault value: \\"false\\"","anyOf":[{"$ref":"#/definitions/AvoidOptionalsConfig"},{"type":"boolean"}]},"showUnusedMappers":{"description":"Warns about unused mappers.\\nDefault value: \\"true\\"","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema, supported\\nin this plugin because of the need for integration with `typescript` package.\\nSee documentation under `typescript` plugin for more information and examples."},"resolverTypeWrapperSignature":{"description":"Allow you to override `resolverTypeWrapper` definition.\\nDefault value: \\"Promise<T> | T\\"","type":"string"},"federation":{"description":"Supports Apollo Federation\\nDefault value: \\"false\\"","type":"boolean"},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"optionalResolveType":{"description":"Sets the `__resolveType` field as optional field.\\nDefault value: \\"false\\"","type":"boolean"},"immutableTypes":{"description":"Generates immutable types by adding `readonly` to properties and uses `ReadonlyArray`.\\nDefault value: \\"false\\"","type":"boolean"},"namespacedImportName":{"description":"Prefixes all GraphQL related generated types with that value, as namespaces import.\\nYou can use this featuere to allow seperation of plugins to different files.\\nDefault value: \\"\'\'\\"","type":"string"},"resolverTypeSuffix":{"description":"Suffix we add to each generated type resolver.\\nDefault value: \\"Resolvers\\"","type":"string"},"allResolversTypeName":{"description":"The type name to use when exporting all resolvers signature as unified type.\\nDefault value: \\"Resolvers\\"","type":"string"},"internalResolversPrefix":{"type":"string","description":"Defines the prefix value used for `__resolveType` and and `__isTypeOf` resolvers.\\nIf you are using `mercurius-js`, please set this field to empty string for better compatiblity.\\nDefault value: \\"\'__\'\\""},"onlyResolveTypeForInterfaces":{"type":"boolean","description":"Turning this flag to `true` will generate resolver siganture that has only `resolveType` for interfaces, forcing developers to write inherited type resolvers in the type itself.\\nDefault value: \\"false\\""},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"FlowDocumentsPluginConfig":{"description":"This plugin generates Flow types based on your `GraphQLSchema` and your GraphQL operations and fragments.\\n\\nIt generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.\\n\\nThis plugin requires you to use `@graphql-codegen/flow` as well, because it depends on it\'s types.","type":"object","properties":{"useFlowExactObjects":{"description":"Generates Flow types as Exact types.\\nDefault value: \\"true\\"","type":"boolean"},"useFlowReadOnlyTypes":{"description":"Generates read-only Flow types\\nDefault value: \\"false\\"","type":"boolean"},"flattenGeneratedTypes":{"description":"Flatten fragment spread and inline fragments into a simple selection set before generating.\\nDefault value: \\"false\\"","type":"boolean"},"preResolveTypes":{"description":"Avoid using `Pick` and resolve the actual primitive type of all selection set.\\nDefault value: \\"false\\"","type":"boolean"},"skipTypeNameForRoot":{"description":"Avoid adding `__typename` for root types. This is ignored when a selection explictly specifies `__typename`.\\nDefault value: \\"false\\"","type":"boolean"},"globalNamespace":{"description":"Puts all generated code under `global` namespace. Useful for Stencil integration.\\nDefault value: \\"false\\"","type":"boolean"},"operationResultSuffix":{"description":"Adds a suffix to generated operation result type names\\nDefault value: \\"\\"","type":"string"},"dedupeOperationSuffix":{"description":"Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.\\nDefault value: \\"false\\"","type":"boolean"},"omitOperationSuffix":{"description":"Set this configuration to `true` if you wish to disable auto add suffix of operation name, like `Query`, `Mutation`, `Subscription`, `Fragment`.\\nDefault value: \\"false\\"","type":"boolean"},"exportFragmentSpreadSubTypes":{"description":"If set to true, it will export the sub-types created in order to make it easier to access fields declared under fragment spread.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"If set to true, it will enable support for parsing variables on fragments.\\nDefault value: \\"false\\"","type":"boolean"},"addUnderscoreToArgsType":{"description":"Adds `_` to generated `Args` types in order to avoid duplicate identifiers.","type":"boolean"},"enumValues":{"$ref":"#/definitions/EnumValuesMap","description":"Overrides the default value of enum values declared in your GraphQL schema.\\nYou can also map the entire enum to an external type by providing a string that of `module#type`."},"declarationKind":{"description":"Overrides the default output for various GraphQL elements.","anyOf":[{"$ref":"#/definitions/DeclarationKindConfig"},{"enum":["abstract class","class","interface","type"],"type":"string"}]},"enumPrefix":{"description":"Allow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\\nDefault value: \\"true\\"","type":"boolean"},"fieldWrapperValue":{"description":"Allow you to add wrapper for field type, use T as the generic value. Make sure to set `wrapFieldDefinitions` to `true` in order to make this flag work.\\nDefault value: \\"T\\"","type":"string"},"wrapFieldDefinitions":{"description":"Set the to `true` in order to wrap field definitions with `FieldWrapper`.\\nThis is useful to allow return types such as Promises and functions.\\nDefault value: \\"false\\"","type":"boolean"},"onlyOperationTypes":{"description":"This will cause the generator to emit types for operations only (basically only enums and scalars)\\nDefault value: \\"false\\"","type":"boolean"},"ignoreEnumValuesFromSchema":{"description":"This will cause the generator to ignore enum values defined in GraphQLSchema\\nDefault value: \\"false\\"","type":"boolean"},"wrapEntireFieldDefinitions":{"type":"boolean","description":"Set the to `true` in order to wrap field definitions with `EntireFieldWrapper`.\\nThis is useful to allow return types such as Promises and functions for fields.\\nDiffers from `wrapFieldDefinitions` in that this wraps the entire field definition if ie. the field is an Array, while\\n`wrapFieldDefinitions` will wrap every single value inside the array.\\nDefault value: \\"true\\""},"entireFieldWrapperValue":{"type":"string","description":"Allow to override the type value of `EntireFieldWrapper`. This wrapper applies outside of Array and Maybe\\nunlike `fieldWrapperValue`, that will wrap the inner type.\\nDefault value: \\"T | Promise<T> | (() => T | Promise<T>)\\""},"strictScalars":{"description":"Makes scalars strict.\\n\\nIf scalars are found in the schema that are not defined in `scalars`\\nan error will be thrown during codegen.\\nDefault value: \\"false\\"","type":"boolean"},"defaultScalarType":{"description":"Allows you to override the type that unknown scalars will have.\\nDefault value: \\"any\\"","type":"string"},"scalars":{"$ref":"#/definitions/ScalarsMap","description":"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."},"namingConvention":{"$ref":"#/definitions/NamingConvention","description":"Allow you to override the naming convention of the output.\\nYou can either override all namings, or specify an object with specific custom naming convention per output.\\nThe format of the converter must be a valid `module#method`.\\nAllowed values for specific output are: `typeNames`, `enumValues`.\\nYou can also use \\"keep\\" to keep all GraphQL names as-is.\\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\\nwhich is to preserves underscores.\\n\\nAvailable case functions in `change-case-all` are `camelCase`, `capitalCase`, `constantCase`, `dotCase`, `headerCase`, `noCase`, `paramCase`, `pascalCase`, `pathCase`, `sentenceCase`, `snakeCase`, `lowerCase`, `localeLowerCase`, `lowerCaseFirst`, `spongeCase`, `titleCase`, `upperCase`, `localeUpperCase` and `upperCaseFirst`\\n[See more](https://github.com/btxtiger/change-case-all)\\nDefault value: \\"change-case-all#pascalCase\\""},"typesPrefix":{"description":"Prefixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"typesSuffix":{"description":"Suffixes all the generated types.\\nDefault value: \\"\\"","type":"string"},"skipTypename":{"description":"Does not add __typename to the generated types, unless it was specified in the selection set.\\nDefault value: \\"false\\"","type":"boolean"},"nonOptionalTypename":{"description":"Automatically adds `__typename` field to the generated types, even when they are not specified\\nin the selection set, and makes it non-optional\\nDefault value: \\"false\\"","type":"boolean"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"dedupeFragments":{"description":"Removes fragment duplicates for reducing data transfer.\\nIt is done by removing sub-fragments imports from fragment definition\\nInstead - all of them are imported to the Operation node.\\nDefault value: \\"false\\"","type":"boolean"}}},"IntrospectionPluginConfig":{"description":"This plugin generates a GraphQL introspection file based on your GraphQL schema.","type":"object","properties":{"minify":{"description":"Set to `true` in order to minify the JSON output.\\nDefault value: \\"false\\"","type":"boolean"},"descriptions":{"description":"Whether to include descriptions in the introspection result.\\nDefault value: \\"true\\"","type":"boolean"},"specifiedByUrl":{"description":"Whether to include `specifiedByUrl` in the introspection result.\\nDefault value: \\"false\\"","type":"boolean"},"directiveIsRepeatable":{"description":"Whether to include `isRepeatable` flag on directives.\\nDefault value: \\"true\\"","type":"boolean"},"schemaDescription":{"description":"Whether to include `description` field on schema.\\nDefault value: \\"false\\"","type":"boolean"},"federation":{"type":"boolean"}}},"FragmentMatcherConfig":{"description":"This plugin generates an introspection file but only with Interfaces and Unions, based on your GraphQLSchema.\\n\\nIf you are using `apollo-client` and your schema contains `interface` or `union` declaration, it\'s recommended to use Apollo\'s Fragment Matcher and the result generated by the plugin.\\n\\nYou can read more about it in `apollo-client` documentation: https://www.apollographql.com/docs/react/data/fragments/#fragments-on-unions-and-interfaces.\\n\\nFragment Matcher plugin accepts a TypeScript / JavaScript or a JSON file as an output _(`.ts, .tsx, .js, .jsx, .json`)_.\\n\\nBoth in TypeScript and JavaScript a default export is being used.\\n\\n> The output is based on the output you choose for the output file name.","type":"object","properties":{"module":{"description":"Compatible only with JSON extension, allow you to choose the export type, either `module.exports` or `export default`.  Allowed values are: `commonjs`,  `es2015`.\\nDefault value: \\"es2015\\"","enum":["commonjs","es2015"],"type":"string"},"apolloClientVersion":{"description":"Compatible only with TS/TSX/JS/JSX extensions, allow you to generate output based on your Apollo-Client version. Valid values are: `2`, `3`.\\nDefault value: \\"3\\"","enum":[2,3],"type":"number"},"useExplicitTyping":{"description":"Create an explicit type based on your schema. This can help IDEs autofill your fragment matcher. This is mostly useful if you do more with your fragment matcher than just pass it to an Apollo-Client.\\nDefault value: \\"false\\"","type":"boolean"},"federation":{"type":"boolean"}}},"UrqlIntrospectionConfig":{"description":"This plugin generates an introspection file for Schema Awareness feature of Urql Cache Exchange\\n\\nYou can read more about it in `urql` documentation: https://formidable.com/open-source/urql/docs/graphcache/schema-awareness/.\\n\\nUrql Introspection plugin accepts a TypeScript / JavaScript or a JSON file as an output _(`.ts, .tsx, .js, .jsx, .json`)_.\\n\\nBoth in TypeScript and JavaScript a default export is being used.\\n\\n> The output is based on the output you choose for the output file name.","type":"object","properties":{"module":{"description":"Compatible only with JSON extension, allow you to choose the export type, either `module.exports` or `export default`.  Allowed values are: `commonjs`,  `es2015`.\\nDefault value: \\"es2015\\"","enum":["commonjs","es2015"],"type":"string"},"useTypeImports":{"type":"boolean","description":"Will use `import type {}` rather than `import {}` when importing only types. This gives\\ncompatibility with TypeScript\'s \\"importsNotUsedAsValues\\": \\"error\\" option\\nDefault value: \\"false\\""},"includeScalars":{"type":"boolean","description":"Includes scalar names (instead of an `Any` replacement) in the output when enabled.\\nDefault value: \\"false\\""},"includeEnums":{"type":"boolean","description":"Includes enums (instead of an `Any` replacement) in the output when enabled.\\nDefault value: \\"false\\""},"includeInputs":{"type":"boolean","description":"Includes all input objects (instead of an `Any` replacement) in the output when enabled.\\nDefault value: \\"false\\""},"includeDirectives":{"type":"boolean","description":"Includes all directives in the output when enabled.\\nDefault value: \\"false\\""}}},"ModulesConfig":{"type":"object","properties":{"baseTypesPath":{"type":"string","description":"Required, should point to the base schema types file.\\nThe key of the output is used a the base path for this file."},"importBaseTypesFrom":{"type":"string","description":"Overrides the package import for the base types. Use this if you are within a monorepo and you wish\\nto import the base types directly from a different package, and not from a relative path."},"cwd":{"type":"string","description":"Optional, override the `cwd` of the execution. We are using `cwd` to figure out the imports between files. Use this if your execution path is not your project root directory.\\nDefault value: \\"process.cwd()\\""},"importTypesNamespace":{"type":"string","description":"Optional, override the name of the import namespace used to import from the `baseTypesPath` file.\\nDefault value: \\"Types\\""},"filename":{"type":"string","description":"Required, sets the file name for the generated files."},"encapsulateModuleTypes":{"type":"string","description":"Configure how to encapsulate the module types, to avoid confusion.\\n\\n`namespace` (default): will wrap all types in a TypeScript namespace, using the module name.\\n`prefix`: will prefix all types from a specific module with the module name.\\n`none`: will skip encapsulation, and generate type as-is.\\nDefault value: \\"namespace\\""}}},"NearOperationFileConfig":{"type":"object","properties":{"baseTypesPath":{"description":"Required, should point to the base schema types file.\\nThe key of the output is used a the base path for this file.\\n\\nIf you wish to use an NPM package or a local workspace package, make sure to prefix the package name with `~`.","type":"string"},"importAllFragmentsFrom":{"description":"Overrides all external fragments import types by using a specific file path or a package name.\\n\\nIf you wish to use an NPM package or a local workspace package, make sure to prefix the package name with `~`.","type":["string","object"]},"extension":{"description":"Optional, sets the extension for the generated files. Use this to override the extension if you are using plugins that requires a different type of extensions (such as `typescript-react-apollo`)\\nDefault value: \\".generated.ts\\"","type":"string"},"cwd":{"description":"Optional, override the `cwd` of the execution. We are using `cwd` to figure out the imports between files. Use this if your execution path is not your project root directory.\\nDefault value: \\"process.cwd()\\"","type":"string"},"folder":{"description":"Optional, defines a folder, (Relative to the source files) where the generated files will be created.\\nDefault value: \\"\'\'\\"","type":"string"},"importTypesNamespace":{"description":"Optional, override the name of the import namespace used to import from the `baseTypesPath` file.\\nDefault value: \\"Types\\"","type":"string"}}},"ImportTypesConfig":{"type":"object","properties":{"typesPath":{"description":"Required, should point to the base schema types file.\\nThe key of the output is used a the base path for this file.","type":"string"},"importTypesNamespace":{"description":"Optional, override the name of the import namespace used to import from the `baseTypesPath` file.\\nDefault value: \\"Types\\"","type":"string"}}},"Types.InstanceOrArray":{"anyOf":[{"$ref":"#/definitions/Types.SchemaWithLoader"},{"$ref":"#/definitions/Types.SchemaFromCodeFile"},{"$ref":"#/definitions/Types.UrlSchemaWithOptions"},{"$ref":"#/definitions/Types.LocalSchemaPathWithOptions"},{"type":"array","items":{"description":"A URL to your GraphQL endpoint, a local path to `.graphql` file, a glob pattern to your GraphQL schema files, or a JavaScript file that exports the schema to generate code from. This can also be an array which specifies multiple schemas to generate code from. You can read more about the supported formats [here](schema-field#available-formats).","anyOf":[{"$ref":"#/definitions/Types.SchemaWithLoader"},{"$ref":"#/definitions/Types.SchemaFromCodeFile"},{"$ref":"#/definitions/Types.UrlSchemaWithOptions"},{"$ref":"#/definitions/Types.LocalSchemaPathWithOptions"},{"type":"string"}]}},{"type":"string"}]},"Types.SchemaWithLoader":{"type":"object","additionalProperties":{"$ref":"#/definitions/Types.SchemaWithLoaderOptions"}},"Types.SchemaWithLoaderOptions":{"additionalProperties":false,"description":"Loads schema using a pointer, with a custom loader (code file).","type":"object","properties":{"loader":{"description":"Specify a path to a custom code file (local or module) that will handle the schema loading.","type":"string"}}},"Types.SchemaFromCodeFile":{"type":"object","additionalProperties":{"$ref":"#/definitions/Types.SchemaFromCodeFileOptions"}},"Types.SchemaFromCodeFileOptions":{"additionalProperties":false,"description":"Loads schema using a pointer, without using `require` while looking for schemas in code files.","type":"object","properties":{"noRequire":{"description":"Set this to `true` in order to tell codegen not to try to `require` files in order to find schema/docs","type":"boolean"},"noPluck":{"description":"Set this to `true` in order to tell codegen not to try to extract GraphQL AST strings schema/docs","type":"boolean"},"assumeValid":{"description":"Set this to `true` in order to tell codegen to skip documents validation.","type":"boolean"}}},"Types.UrlSchemaWithOptions":{"type":"object","additionalProperties":{"$ref":"#/definitions/Types.UrlSchemaOptions"}},"Types.UrlSchemaOptions":{"additionalProperties":false,"description":"Loads a schema from remote endpoint, with custom http options.","type":"object","properties":{"headers":{"description":"HTTP headers you wish to add to the HTTP request sent by codegen to fetch your GraphQL remote schema.","type":"object","additionalProperties":{"type":"string"}},"customFetch":{"description":"Specify a Node module name, or a custom file, to be used instead of standard `fetch`","type":"string"},"method":{"description":"HTTP Method to use, either POST (default) or GET.","type":"string"}}},"Types.LocalSchemaPathWithOptions":{"type":"object","additionalProperties":{"$ref":"#/definitions/Types.LocalSchemaPathOptions"}},"Types.LocalSchemaPathOptions":{"additionalProperties":false,"description":"Loads a schema a local file or files, with customized options for parsing/loading.","type":"object","properties":{"skipGraphQLImport":{"description":"Skips checks for graphql-import syntax and loads the file as-is, without imports support.\\nDefault value: \\"true\\"","type":"boolean"},"commentDescriptions":{"description":"Converts all GraphQL comments (`#` sign) to descriptions during the parse phase, to make it available\\nfor plugins later.\\nDefault value: \\"false\\"","type":"boolean"},"assumeValidSDL":{"description":"Set to true to assume the SDL is valid.\\nDefault value: \\"false\\"","type":"boolean"},"noLocation":{"description":"By default, the parser creates AST nodes that know the location\\nin the source that they correspond to. This configuration flag\\ndisables that behavior for performance or testing.\\nDefault value: \\"false\\"","type":"boolean"},"allowLegacySDLEmptyFields":{"description":"If enabled, the parser will parse empty fields sets in the Schema\\nDefinition Language. Otherwise, the parser will follow the current\\nspecification.\\n\\nThis option is provided to ease adoption of the final SDL specification\\nand will be removed in v16.\\nDefault value: \\"false\\"","type":"boolean"},"allowLegacySDLImplementsInterfaces":{"description":"If enabled, the parser will parse implemented interfaces with no `&`\\ncharacter between each interface. Otherwise, the parser will follow the\\ncurrent specification.\\n\\nThis option is provided to ease adoption of the final SDL specification\\nand will be removed in v16.\\nDefault value: \\"false\\"","type":"boolean"},"experimentalFragmentVariables":{"description":"EXPERIMENTAL:\\n\\nIf enabled, the parser will understand and parse variable definitions\\ncontained in a fragment definition. They\'ll be represented in the\\n`variableDefinitions` field of the FragmentDefinitionNode.\\n\\nThe syntax is identical to normal, query-defined variables. For example:\\n\\n  fragment A($var: Boolean = false) on T  {\\n    ...\\n  }\\n\\nNote: this feature is experimental and may change or be removed in the\\nfuture.\\nDefault value: \\"false\\"","type":"boolean"}}},"Types.RequireExtension":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"Types.InstanceOrArray_1":{"anyOf":[{"$ref":"#/definitions/Types.CustomDocumentLoader"},{"type":"array","items":{"anyOf":[{"$ref":"#/definitions/Types.CustomDocumentLoader"},{"type":"string"}]}},{"type":"string"}]},"Types.CustomDocumentLoader":{"type":"object","additionalProperties":{"$ref":"#/definitions/Types.CustomDocumentLoaderOptions"}},"Types.CustomDocumentLoaderOptions":{"additionalProperties":false,"description":"Specify a path to a custom loader for your GraphQL documents.","type":"object","properties":{"loader":{"description":"Specify a path to a custom code file (local or module) that will handle the documents loading.","type":"string"}}},"__type":{"type":"object","additionalProperties":{"$ref":"#/definitions/T"}},"T":{"type":"object"},"Types.PluginConfig":{"$ref":"#/definitions/__type"},"Types.ConfiguredOutput":{"additionalProperties":false,"type":"object","properties":{"plugins":{"type":"array","items":{"$ref":"#/definitions/GeneratedPluginsMap"},"description":"List of plugins to apply to this current output file.\\n\\nYou can either specify plugins from the community using the NPM package name (after you installed it in your project), or you can use a path to a local file for custom plugins.\\n\\nYou can find a list of available plugins here: https://graphql-code-generator.com/docs/plugins/index\\nNeed a custom plugin? read this: https://graphql-code-generator.com/docs/custom-codegen/index"},"preset":{"description":"If your setup uses Preset to have a more dynamic setup and output, set the name of your preset here.\\n\\nPresets are a way to have more than one file output, for example: https://graphql-code-generator.com/docs/presets/near-operation-file\\n\\nYou can either specify a preset from the community using the NPM package name (after you installed it in your project), or you can use a path to a local file for a custom preset.\\n\\nList of available presets: https://graphql-code-generator.com/docs/presets/presets-index","anyOf":[{"type":"object","properties":{"buildGeneratesSection":{"type":"object"}}},{"type":"string"}]},"presetConfig":{"description":"If your setup uses Preset to have a more dynamic setup and output, set the configuration object of your preset here.\\n\\nList of available presets: https://graphql-code-generator.com/docs/presets/presets-index","type":"object","additionalProperties":{}},"overwrite":{"description":"A flag to overwrite files if they already exist when generating code (`true` by default).\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/codegen-config","type":"boolean"},"documents":{"$ref":"#/definitions/Types.InstanceOrArray_1","description":"A pointer(s) to your GraphQL documents: query, mutation, subscription and fragment. These documents will be loaded into for all your output files.\\nYou can use one of the following:\\n\\n- Path to a local `.graphql` file\\n- Path to a code file (for example: `.js` or `.tsx`) containing GraphQL operation strings.\\n- Glob expression pointing to multiple `.graphql` files\\n- Glob expression pointing to multiple code files\\n- Inline string containing GraphQL SDL operation definition\\n\\nYou can specify either a single file, or multiple.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/documents-field"},"schema":{"$ref":"#/definitions/Types.InstanceOrArray","description":"A pointer(s) to your GraphQL schema. This schema will be available only for this specific `generates` record.\\nYou can use one of the following:\\n\\n- URL pointing to a GraphQL endpoint\\n- Path to a local `.json` file\\n- Path to a local `.graphql` file\\n- Glob expression pointing to multiple `.graphql` files\\n- Path to a local code file (for example: `.js`) that exports `GraphQLSchema` object\\n- Inline string containing GraphQL SDL schema definition\\n\\nYou can specify either a single schema, or multiple, and GraphQL Code Generator will merge the schemas into a single schema.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/schema-field"},"config":{"additionalProperties":true},"hooks":{"$ref":"#/definitions/Partial","description":"Specifies scripts to run when events are happening in the codegen core.\\nHooks defined on that level will effect only the current output files.\\n\\nFor more details: https://graphql-code-generator.com/docs/getting-started/lifecycle-hooks"}},"allOf":[{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-react-query"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/ReactQueryRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-rtk-query"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/RTKConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-generic-sdk"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/RawGenericSdkPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-apollo-client-helpers"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/ApolloClientHelpersConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"add"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/AddPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"time"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TimePluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeScriptPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-operations"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeScriptDocumentsPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"c-sharp"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/CSharpResolversPluginRawConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"c-sharp-operations"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/CSharpOperationsRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"schema-ast"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/SchemaASTConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-type-graphql"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeGraphQLPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-graphql-files-modules"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeScriptFilesModulesPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"named-operations-object"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/NamedOperationsObjectPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-graphql-request"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/RawGraphQLRequestPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-compatibility"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/CompatibilityPluginRawConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-mongodb"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeScriptMongoPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-resolvers"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeScriptResolversPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-apollo-angular"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/ApolloAngularRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-urql"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/UrqlRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-react-apollo"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/ReactApolloRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-vue-apollo"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/VueApolloRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-vue-apollo-smart-ops"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/VueApolloSmartOpsRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-vue-urql"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/VueUrqlRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-stencil-apollo"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/StencilApolloRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"typescript-document-nodes"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/TypeScriptDocumentNodesRawPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"java-apollo-android"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/JavaApolloAndroidPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"java-resolvers"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/JavaResolversPluginRawConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"java"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/JavaResolversPluginRawConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"kotlin"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/KotlinResolversPluginRawConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"flow"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/FlowPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"flow-resolvers"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/RawFlowResolversConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"flow-operations"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/FlowDocumentsPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"introspection"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/IntrospectionPluginConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"fragment-matcher"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/FragmentMatcherConfig"}}}},{"if":{"properties":{"plugins":{"contains":{"type":"string","const":"urql-introspection"}}}},"then":{"properties":{"config":{"$ref":"#/definitions/UrqlIntrospectionConfig"}}}}]},"__type_1":{"type":"object","properties":{"afterStart":{"$ref":"#/definitions/T_1","description":"Triggered with no arguments when the codegen starts (after the `codegen.yml` has beed parsed).\\n\\nSpecify a shell command to run."},"beforeDone":{"$ref":"#/definitions/T_1","description":"Triggered with no arguments, right before the codegen closes, or when watch mode is stopped.\\n\\nSpecify a shell command to run."},"onWatchTriggered":{"$ref":"#/definitions/T_1","description":"Triggered every time a file changes when using watch mode.\\nTriggered with two arguments: the type of the event (for example, `changed`) and the path of the file."},"onError":{"$ref":"#/definitions/T_1","description":"Triggered in case of a general error in the codegen. The argument is a string containing the error."},"afterOneFileWrite":{"$ref":"#/definitions/T_1","description":"Triggered after a file is written to the file-system. Executed with the path for the file.\\nIf the content of the file hasn\'t changed since last execution - this hooks won\'t be triggered.\\n\\n> This is a very useful hook, you can use it for integration with Prettier or other linters."},"afterAllFileWrite":{"$ref":"#/definitions/T_1","description":"Executed after writing all the files to the file-system.\\nTriggered with multiple arguments - paths for all files."},"beforeOneFileWrite":{"$ref":"#/definitions/T_1","description":"Triggered before a file is written to the file-system. Executed with the path for the file.\\n\\nIf the content of the file hasn\'t changed since last execution - this hooks won\'t be triggered."},"beforeAllFileWrite":{"$ref":"#/definitions/T_1","description":"Executed after the codegen has done creating the output and before writing the files to the file-system.\\n\\nTriggered with multiple arguments - paths for all relevant files.\\n\\n> Not all the files will be actually written to the file-system, because this is triggered before checking if the file has changed since last execution."}}},"T_1":{"anyOf":[{"type":"array","items":{"type":["string","object"]}},{"type":["string","object"]}]},"Partial":{"$ref":"#/definitions/__type_1"},"__type_2":{"type":"object"},"Types.PackageLoaderFn":{"$ref":"#/definitions/__type_2"},"Array":{"type":"array","items":{"type":"object","properties":{"name":{"description":"the name of the NPM package name you wish to look for","type":"string"},"identifier":{"description":"the tag identifier name you wish to look for","type":"string"}}}},"__type_3":{"type":"object"},"Record":{"$ref":"#/definitions/__type_3"},"ScalarsMap":{"description":"Scalars map or a string, a map between the GraphQL scalar name and the identifier that should be used","anyOf":[{"type":"object","additionalProperties":{"type":"string"}},{"type":"string"}]},"NamingConvention":{"anyOf":[{"$ref":"#/definitions/NamingConventionMap"},{"type":["string","object"]}]},"NamingConventionMap":{"additionalProperties":false,"type":"object","properties":{"enumValues":{"type":["string","object"]},"typeNames":{"type":["string","object"]},"transformUnderscore":{"type":"boolean"}}},"DocumentMode":{"enum":["documentNode","documentNodeImportFragments","external","graphQLTag","string"],"type":"string"},"AvoidOptionalsConfig":{"type":"object","properties":{"field":{"type":"boolean"},"object":{"type":"boolean"},"inputValue":{"type":"boolean"},"defaultValue":{"type":"boolean"}}},"EnumValuesMap":{"description":"A raw configuration for enumValues map - can be represented with a single string value for a file path,\\na map between enum name and a file path, or a map between enum name and an object with explicit enum values.","anyOf":[{"type":"object","additionalProperties":{"anyOf":[{"allOf":[{"type":"object","additionalProperties":{"type":["string","number"]}},{"$ref":"#/definitions/AdditionalProps"}]},{"type":"string"}]}},{"type":"string"}]},"AdditionalProps":{"type":"object"},"DeclarationKindConfig":{"type":"object","properties":{"scalar":{"$ref":"#/definitions/DeclarationKind"},"input":{"$ref":"#/definitions/DeclarationKind"},"type":{"$ref":"#/definitions/DeclarationKind"},"interface":{"$ref":"#/definitions/DeclarationKind"},"arguments":{"$ref":"#/definitions/DeclarationKind"}}},"DeclarationKind":{"enum":["abstract class","class","interface","type"],"type":"string"},"__type_4":{"type":"object","properties":{"type":{"type":"string"},"interface":{"type":"string"},"field":{"type":"string"},"input":{"type":"string"},"arguments":{"type":"string"}}},"Partial_1":{"$ref":"#/definitions/__type_4"},"Array_1":{"type":"array","items":{"type":"string"}},"StencilComponentType":{"enum":["class","functional"],"type":"string"},"FileType":{"enum":[0,1,2,3],"type":"number"},"GeneratedPluginsMap":{"anyOf":[{"type":"object","additionalProperties":true,"properties":{"typescript-react-query":{"additionalProperties":false,"$ref":"#/definitions/ReactQueryRawPluginConfig"},"@graphql-codegen/typescript-react-query":{"additionalProperties":false,"$ref":"#/definitions/ReactQueryRawPluginConfig"},"typescript-rtk-query":{"additionalProperties":false,"$ref":"#/definitions/RTKConfig"},"@graphql-codegen/typescript-rtk-query":{"additionalProperties":false,"$ref":"#/definitions/RTKConfig"},"typescript-generic-sdk":{"additionalProperties":false,"$ref":"#/definitions/RawGenericSdkPluginConfig"},"@graphql-codegen/typescript-generic-sdk":{"additionalProperties":false,"$ref":"#/definitions/RawGenericSdkPluginConfig"},"typescript-apollo-client-helpers":{"additionalProperties":false,"$ref":"#/definitions/ApolloClientHelpersConfig"},"@graphql-codegen/typescript-apollo-client-helpers":{"additionalProperties":false,"$ref":"#/definitions/ApolloClientHelpersConfig"},"add":{"additionalProperties":false,"$ref":"#/definitions/AddPluginConfig"},"@graphql-codegen/add":{"additionalProperties":false,"$ref":"#/definitions/AddPluginConfig"},"time":{"additionalProperties":false,"$ref":"#/definitions/TimePluginConfig"},"@graphql-codegen/time":{"additionalProperties":false,"$ref":"#/definitions/TimePluginConfig"},"typescript":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptPluginConfig"},"@graphql-codegen/typescript":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptPluginConfig"},"typescript-operations":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptDocumentsPluginConfig"},"@graphql-codegen/typescript-operations":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptDocumentsPluginConfig"},"c-sharp":{"additionalProperties":false,"$ref":"#/definitions/CSharpResolversPluginRawConfig"},"@graphql-codegen/c-sharp":{"additionalProperties":false,"$ref":"#/definitions/CSharpResolversPluginRawConfig"},"c-sharp-operations":{"additionalProperties":false,"$ref":"#/definitions/CSharpOperationsRawPluginConfig"},"@graphql-codegen/c-sharp-operations":{"additionalProperties":false,"$ref":"#/definitions/CSharpOperationsRawPluginConfig"},"schema-ast":{"additionalProperties":false,"$ref":"#/definitions/SchemaASTConfig"},"@graphql-codegen/schema-ast":{"additionalProperties":false,"$ref":"#/definitions/SchemaASTConfig"},"typescript-type-graphql":{"additionalProperties":false,"$ref":"#/definitions/TypeGraphQLPluginConfig"},"@graphql-codegen/typescript-type-graphql":{"additionalProperties":false,"$ref":"#/definitions/TypeGraphQLPluginConfig"},"typescript-graphql-files-modules":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptFilesModulesPluginConfig"},"@graphql-codegen/typescript-graphql-files-modules":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptFilesModulesPluginConfig"},"named-operations-object":{"additionalProperties":false,"$ref":"#/definitions/NamedOperationsObjectPluginConfig"},"@graphql-codegen/named-operations-object":{"additionalProperties":false,"$ref":"#/definitions/NamedOperationsObjectPluginConfig"},"typescript-graphql-request":{"additionalProperties":false,"$ref":"#/definitions/RawGraphQLRequestPluginConfig"},"@graphql-codegen/typescript-graphql-request":{"additionalProperties":false,"$ref":"#/definitions/RawGraphQLRequestPluginConfig"},"typescript-compatibility":{"additionalProperties":false,"$ref":"#/definitions/CompatibilityPluginRawConfig"},"@graphql-codegen/typescript-compatibility":{"additionalProperties":false,"$ref":"#/definitions/CompatibilityPluginRawConfig"},"typescript-mongodb":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptMongoPluginConfig"},"@graphql-codegen/typescript-mongodb":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptMongoPluginConfig"},"typescript-resolvers":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptResolversPluginConfig"},"@graphql-codegen/typescript-resolvers":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptResolversPluginConfig"},"typescript-apollo-angular":{"additionalProperties":false,"$ref":"#/definitions/ApolloAngularRawPluginConfig"},"@graphql-codegen/typescript-apollo-angular":{"additionalProperties":false,"$ref":"#/definitions/ApolloAngularRawPluginConfig"},"typescript-urql":{"additionalProperties":false,"$ref":"#/definitions/UrqlRawPluginConfig"},"@graphql-codegen/typescript-urql":{"additionalProperties":false,"$ref":"#/definitions/UrqlRawPluginConfig"},"typescript-react-apollo":{"additionalProperties":false,"$ref":"#/definitions/ReactApolloRawPluginConfig"},"@graphql-codegen/typescript-react-apollo":{"additionalProperties":false,"$ref":"#/definitions/ReactApolloRawPluginConfig"},"typescript-vue-apollo":{"additionalProperties":false,"$ref":"#/definitions/VueApolloRawPluginConfig"},"@graphql-codegen/typescript-vue-apollo":{"additionalProperties":false,"$ref":"#/definitions/VueApolloRawPluginConfig"},"typescript-vue-apollo-smart-ops":{"additionalProperties":false,"$ref":"#/definitions/VueApolloSmartOpsRawPluginConfig"},"@graphql-codegen/typescript-vue-apollo-smart-ops":{"additionalProperties":false,"$ref":"#/definitions/VueApolloSmartOpsRawPluginConfig"},"typescript-vue-urql":{"additionalProperties":false,"$ref":"#/definitions/VueUrqlRawPluginConfig"},"@graphql-codegen/typescript-vue-urql":{"additionalProperties":false,"$ref":"#/definitions/VueUrqlRawPluginConfig"},"typescript-stencil-apollo":{"additionalProperties":false,"$ref":"#/definitions/StencilApolloRawPluginConfig"},"@graphql-codegen/typescript-stencil-apollo":{"additionalProperties":false,"$ref":"#/definitions/StencilApolloRawPluginConfig"},"typescript-document-nodes":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptDocumentNodesRawPluginConfig"},"@graphql-codegen/typescript-document-nodes":{"additionalProperties":false,"$ref":"#/definitions/TypeScriptDocumentNodesRawPluginConfig"},"java-apollo-android":{"additionalProperties":false,"$ref":"#/definitions/JavaApolloAndroidPluginConfig"},"@graphql-codegen/java-apollo-android":{"additionalProperties":false,"$ref":"#/definitions/JavaApolloAndroidPluginConfig"},"java-resolvers":{"additionalProperties":false,"$ref":"#/definitions/JavaResolversPluginRawConfig"},"@graphql-codegen/java-resolvers":{"additionalProperties":false,"$ref":"#/definitions/JavaResolversPluginRawConfig"},"java":{"additionalProperties":false,"$ref":"#/definitions/JavaResolversPluginRawConfig"},"@graphql-codegen/java":{"additionalProperties":false,"$ref":"#/definitions/JavaResolversPluginRawConfig"},"kotlin":{"additionalProperties":false,"$ref":"#/definitions/KotlinResolversPluginRawConfig"},"@graphql-codegen/kotlin":{"additionalProperties":false,"$ref":"#/definitions/KotlinResolversPluginRawConfig"},"flow":{"additionalProperties":false,"$ref":"#/definitions/FlowPluginConfig"},"@graphql-codegen/flow":{"additionalProperties":false,"$ref":"#/definitions/FlowPluginConfig"},"flow-resolvers":{"additionalProperties":false,"$ref":"#/definitions/RawFlowResolversConfig"},"@graphql-codegen/flow-resolvers":{"additionalProperties":false,"$ref":"#/definitions/RawFlowResolversConfig"},"flow-operations":{"additionalProperties":false,"$ref":"#/definitions/FlowDocumentsPluginConfig"},"@graphql-codegen/flow-operations":{"additionalProperties":false,"$ref":"#/definitions/FlowDocumentsPluginConfig"},"introspection":{"additionalProperties":false,"$ref":"#/definitions/IntrospectionPluginConfig"},"@graphql-codegen/introspection":{"additionalProperties":false,"$ref":"#/definitions/IntrospectionPluginConfig"},"fragment-matcher":{"additionalProperties":false,"$ref":"#/definitions/FragmentMatcherConfig"},"@graphql-codegen/fragment-matcher":{"additionalProperties":false,"$ref":"#/definitions/FragmentMatcherConfig"},"urql-introspection":{"additionalProperties":false,"$ref":"#/definitions/UrqlIntrospectionConfig"},"@graphql-codegen/urql-introspection":{"additionalProperties":false,"$ref":"#/definitions/UrqlIntrospectionConfig"}}},{"type":"string","oneOf":[{"const":"typescript-react-query","description":"This plugin generates `React-Query` Hooks with TypeScript typings.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-react-query\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-react-query\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-react-query","description":"This plugin generates `React-Query` Hooks with TypeScript typings.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-react-query\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-react-query\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-rtk-query","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-rtk-query\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-rtk-query\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-rtk-query","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-rtk-query\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-rtk-query\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-generic-sdk","description":"This plugin generate a generic SDK (without any Requester implemented), allow you to easily customize the way you fetch your data, without loosing the strongly-typed integration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-generic-sdk\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-generic-sdk\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-generic-sdk","description":"This plugin generate a generic SDK (without any Requester implemented), allow you to easily customize the way you fetch your data, without loosing the strongly-typed integration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-generic-sdk\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-generic-sdk\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-apollo-client-helpers","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-apollo-client-helpers\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-apollo-client-helpers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-apollo-client-helpers","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-apollo-client-helpers\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-apollo-client-helpers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"add","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/add\\n\\n=> Make sure to include \\"@graphql-codegen/add\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/add","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/add\\n\\n=> Make sure to include \\"@graphql-codegen/add\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"time","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/time\\n\\n=> Make sure to include \\"@graphql-codegen/time\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/time","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/time\\n\\n=> Make sure to include \\"@graphql-codegen/time\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript","description":"This plugin generates the base TypeScript types, based on your GraphQL schema.\\n\\nThe types generated by this plugin are simple, and refers to the exact structure of your schema, and it\'s used as the base types for other plugins (such as `typescript-operations` / `typescript-resolvers`)\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript\\n\\n=> Make sure to include \\"@graphql-codegen/typescript\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript","description":"This plugin generates the base TypeScript types, based on your GraphQL schema.\\n\\nThe types generated by this plugin are simple, and refers to the exact structure of your schema, and it\'s used as the base types for other plugins (such as `typescript-operations` / `typescript-resolvers`)\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript\\n\\n=> Make sure to include \\"@graphql-codegen/typescript\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-operations","description":"This plugin generates TypeScript types based on your GraphQLSchema *and* your GraphQL operations and fragments.\\nIt generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.\\n\\nNote: In most configurations, this plugin requires you to use `typescript as well, because it depends on its base types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-operations\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-operations\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-operations","description":"This plugin generates TypeScript types based on your GraphQLSchema *and* your GraphQL operations and fragments.\\nIt generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.\\n\\nNote: In most configurations, this plugin requires you to use `typescript as well, because it depends on its base types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-operations\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-operations\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"c-sharp","description":"This plugin generates C# `class` identifier for your schema types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/c-sharp\\n\\n=> Make sure to include \\"@graphql-codegen/c-sharp\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/c-sharp","description":"This plugin generates C# `class` identifier for your schema types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/c-sharp\\n\\n=> Make sure to include \\"@graphql-codegen/c-sharp\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"c-sharp-operations","description":"This plugin generates C# `class` based on your GraphQL operations.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/c-sharp-operations\\n\\n=> Make sure to include \\"@graphql-codegen/c-sharp-operations\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/c-sharp-operations","description":"This plugin generates C# `class` based on your GraphQL operations.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/c-sharp-operations\\n\\n=> Make sure to include \\"@graphql-codegen/c-sharp-operations\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"schema-ast","description":"This plugin prints the merged schema as string. If multiple schemas are provided, they will be merged and printed as one schema.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/schema-ast\\n\\n=> Make sure to include \\"@graphql-codegen/schema-ast\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/schema-ast","description":"This plugin prints the merged schema as string. If multiple schemas are provided, they will be merged and printed as one schema.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/schema-ast\\n\\n=> Make sure to include \\"@graphql-codegen/schema-ast\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-type-graphql","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-type-graphql\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-type-graphql\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-type-graphql","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-type-graphql\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-type-graphql\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-graphql-files-modules","description":"This plugin generates TypeScript typings for `.graphql` files containing GraphQL documents, which later on can be consumed using [`graphql-tag/loader`](https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader) or use `string` types if you will use the operations as raw strings, and get type-check and type-safety for your imports. This means that any time you import objects from `.graphql` files, your IDE will provide auto-complete.\\n\\nThis plugin also handles `.graphql` files containing multiple GraphQL documents, and name the imports according to the operation name.\\n\\n> \u26a0 Fragments are not generated with named imports, only as default imports, due to `graphql-tag/loader` behavior.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-graphql-files-modules\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-graphql-files-modules\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-graphql-files-modules","description":"This plugin generates TypeScript typings for `.graphql` files containing GraphQL documents, which later on can be consumed using [`graphql-tag/loader`](https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader) or use `string` types if you will use the operations as raw strings, and get type-check and type-safety for your imports. This means that any time you import objects from `.graphql` files, your IDE will provide auto-complete.\\n\\nThis plugin also handles `.graphql` files containing multiple GraphQL documents, and name the imports according to the operation name.\\n\\n> \u26a0 Fragments are not generated with named imports, only as default imports, due to `graphql-tag/loader` behavior.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-graphql-files-modules\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-graphql-files-modules\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"named-operations-object","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/named-operations-object\\n\\n=> Make sure to include \\"@graphql-codegen/named-operations-object\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/named-operations-object","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/named-operations-object\\n\\n=> Make sure to include \\"@graphql-codegen/named-operations-object\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-graphql-request","description":"This plugin generates [`graphql-request`](https://www.npmjs.com/package/graphql-request) ready-to-use SDK, which is fully-typed.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-graphql-request\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-graphql-request\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-graphql-request","description":"This plugin generates [`graphql-request`](https://www.npmjs.com/package/graphql-request) ready-to-use SDK, which is fully-typed.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-graphql-request\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-graphql-request\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-compatibility","description":"If you are migrating from <1.0, we created a new plugin called `typescript-compatibility` that generates backward compatibility for the `typescript-operations` and `typescript-react-apollo` plugins.\\n\\nIt generates types that are pointing to the new form of types. It supports _most_ of the use-cases.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-compatibility\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-compatibility\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-compatibility","description":"If you are migrating from <1.0, we created a new plugin called `typescript-compatibility` that generates backward compatibility for the `typescript-operations` and `typescript-react-apollo` plugins.\\n\\nIt generates types that are pointing to the new form of types. It supports _most_ of the use-cases.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-compatibility\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-compatibility\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-mongodb","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-mongodb\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-mongodb\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-mongodb","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-mongodb\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-mongodb\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-resolvers","description":"This plugin generates TypeScript signature for `resolve` functions of your GraphQL API.\\nYou can use this plugin a to generate simple resolvers signature based on your GraphQL types, or you can change it\'s behavior be providing custom model types (mappers).\\n\\nYou can find a blog post explaining the usage of this plugin here: https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-resolvers\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-resolvers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-resolvers","description":"This plugin generates TypeScript signature for `resolve` functions of your GraphQL API.\\nYou can use this plugin a to generate simple resolvers signature based on your GraphQL types, or you can change it\'s behavior be providing custom model types (mappers).\\n\\nYou can find a blog post explaining the usage of this plugin here: https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-resolvers\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-resolvers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-apollo-angular","description":"This plugin generates Apollo services (`Query`, `Mutation` and `Subscription`) with TypeScript typings.\\n\\nIt will generate a strongly typed Angular service for every defined query, mutation or subscription. The generated Angular services are ready to inject and use within your Angular component.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nTo shed some more light regards this template, it\'s recommended to go through the this article: http://apollographql.com/docs/angular/basics/services.html , and to read the Code Generation with Apollo Angular: https://the-guild.dev/blog/apollo-angular-12\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-apollo-angular\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-apollo-angular\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-apollo-angular","description":"This plugin generates Apollo services (`Query`, `Mutation` and `Subscription`) with TypeScript typings.\\n\\nIt will generate a strongly typed Angular service for every defined query, mutation or subscription. The generated Angular services are ready to inject and use within your Angular component.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nTo shed some more light regards this template, it\'s recommended to go through the this article: http://apollographql.com/docs/angular/basics/services.html , and to read the Code Generation with Apollo Angular: https://the-guild.dev/blog/apollo-angular-12\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-apollo-angular\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-apollo-angular\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-urql","description":"This plugin generates `urql` (https://github.com/FormidableLabs/urql) components and HOC with TypeScript typings.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-urql\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-urql\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-urql","description":"This plugin generates `urql` (https://github.com/FormidableLabs/urql) components and HOC with TypeScript typings.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-urql\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-urql\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-react-apollo","description":"This plugin generates React Apollo components and HOC with TypeScript typings.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-react-apollo\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-react-apollo\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-react-apollo","description":"This plugin generates React Apollo components and HOC with TypeScript typings.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-react-apollo\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-react-apollo\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-vue-apollo","description":"This plugin generates\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-vue-apollo\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-vue-apollo\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-vue-apollo","description":"This plugin generates\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-vue-apollo\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-vue-apollo\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-vue-apollo-smart-ops","description":"This plugin generates Vue Apollo Smart Query, Smart Subscription and mutation operation functions with\\nTypeScript typings.\\n\\nThis plugin relies on some helper functions and types from the `vue-apollo-smart-ops` package. That package also adds\\nsome optional functionality for improved error handling in Vue Apollo operations which can be configured in the\\ngenerated code from this plugin.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` -\\nand thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-vue-apollo-smart-ops\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-vue-apollo-smart-ops\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-vue-apollo-smart-ops","description":"This plugin generates Vue Apollo Smart Query, Smart Subscription and mutation operation functions with\\nTypeScript typings.\\n\\nThis plugin relies on some helper functions and types from the `vue-apollo-smart-ops` package. That package also adds\\nsome optional functionality for improved error handling in Vue Apollo operations which can be configured in the\\ngenerated code from this plugin.\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` -\\nand thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-vue-apollo-smart-ops\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-vue-apollo-smart-ops\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-vue-urql","description":"This plugin generates `urql` (https://github.com/FormidableLabs/urql) composition functions with TypeScript typings.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-vue-urql\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-vue-urql\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-vue-urql","description":"This plugin generates `urql` (https://github.com/FormidableLabs/urql) composition functions with TypeScript typings.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-vue-urql\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-vue-urql\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-stencil-apollo","description":"This plugin generates Stencil Apollo functional components typings\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-stencil-apollo\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-stencil-apollo\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-stencil-apollo","description":"This plugin generates Stencil Apollo functional components typings\\n\\nIt extends the basic TypeScript plugins: `@graphql-codegen/typescript`, `@graphql-codegen/typescript-operations` - and thus shares a similar configuration.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-stencil-apollo\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-stencil-apollo\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"typescript-document-nodes","description":"This plugin generates TypeScript source (`.ts`) file from GraphQL files (`.graphql`).\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-document-nodes\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-document-nodes\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/typescript-document-nodes","description":"This plugin generates TypeScript source (`.ts`) file from GraphQL files (`.graphql`).\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/typescript-document-nodes\\n\\n=> Make sure to include \\"@graphql-codegen/typescript-document-nodes\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"java-apollo-android","description":"This plugin and presets creates generated mappers and parsers for a complete type-safe GraphQL requests, for developers that uses Apollo Android runtime.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/java-apollo-android\\n\\n=> Make sure to include \\"@graphql-codegen/java-apollo-android\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/java-apollo-android","description":"This plugin and presets creates generated mappers and parsers for a complete type-safe GraphQL requests, for developers that uses Apollo Android runtime.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/java-apollo-android\\n\\n=> Make sure to include \\"@graphql-codegen/java-apollo-android\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"java-resolvers","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/java-resolvers\\n\\n=> Make sure to include \\"@graphql-codegen/java-resolvers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/java-resolvers","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/java-resolvers\\n\\n=> Make sure to include \\"@graphql-codegen/java-resolvers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"java","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/java\\n\\n=> Make sure to include \\"@graphql-codegen/java\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/java","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/java\\n\\n=> Make sure to include \\"@graphql-codegen/java\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"kotlin","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/kotlin\\n\\n=> Make sure to include \\"@graphql-codegen/kotlin\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/kotlin","description":"\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/kotlin\\n\\n=> Make sure to include \\"@graphql-codegen/kotlin\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"flow","description":"This plugin generates Flow types based on your `GraphQLSchema`.\\n\\nIt generates types for your entire schema: types, input types, enum, interface, scalar and union.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/flow\\n\\n=> Make sure to include \\"@graphql-codegen/flow\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/flow","description":"This plugin generates Flow types based on your `GraphQLSchema`.\\n\\nIt generates types for your entire schema: types, input types, enum, interface, scalar and union.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/flow\\n\\n=> Make sure to include \\"@graphql-codegen/flow\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"flow-resolvers","description":"This plugin generates resolvers signature based on your `GraphQLSchema`.\\n\\nIt generates types for your entire schema: types, input types, enum, interface, scalar and union.\\n\\nThis plugin requires you to use `@graphql-codegen/flow` as well, because it depends on it\'s types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/flow-resolvers\\n\\n=> Make sure to include \\"@graphql-codegen/flow-resolvers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/flow-resolvers","description":"This plugin generates resolvers signature based on your `GraphQLSchema`.\\n\\nIt generates types for your entire schema: types, input types, enum, interface, scalar and union.\\n\\nThis plugin requires you to use `@graphql-codegen/flow` as well, because it depends on it\'s types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/flow-resolvers\\n\\n=> Make sure to include \\"@graphql-codegen/flow-resolvers\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"flow-operations","description":"This plugin generates Flow types based on your `GraphQLSchema` and your GraphQL operations and fragments.\\n\\nIt generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.\\n\\nThis plugin requires you to use `@graphql-codegen/flow` as well, because it depends on it\'s types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/flow-operations\\n\\n=> Make sure to include \\"@graphql-codegen/flow-operations\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/flow-operations","description":"This plugin generates Flow types based on your `GraphQLSchema` and your GraphQL operations and fragments.\\n\\nIt generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.\\n\\nThis plugin requires you to use `@graphql-codegen/flow` as well, because it depends on it\'s types.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/flow-operations\\n\\n=> Make sure to include \\"@graphql-codegen/flow-operations\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"introspection","description":"This plugin generates a GraphQL introspection file based on your GraphQL schema.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/introspection\\n\\n=> Make sure to include \\"@graphql-codegen/introspection\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/introspection","description":"This plugin generates a GraphQL introspection file based on your GraphQL schema.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/introspection\\n\\n=> Make sure to include \\"@graphql-codegen/introspection\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"fragment-matcher","description":"This plugin generates an introspection file but only with Interfaces and Unions, based on your GraphQLSchema.\\n\\nIf you are using `apollo-client` and your schema contains `interface` or `union` declaration, it\'s recommended to use Apollo\'s Fragment Matcher and the result generated by the plugin.\\n\\nYou can read more about it in `apollo-client` documentation: https://www.apollographql.com/docs/react/data/fragments/#fragments-on-unions-and-interfaces.\\n\\nFragment Matcher plugin accepts a TypeScript / JavaScript or a JSON file as an output _(`.ts, .tsx, .js, .jsx, .json`)_.\\n\\nBoth in TypeScript and JavaScript a default export is being used.\\n\\n> The output is based on the output you choose for the output file name.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/fragment-matcher\\n\\n=> Make sure to include \\"@graphql-codegen/fragment-matcher\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/fragment-matcher","description":"This plugin generates an introspection file but only with Interfaces and Unions, based on your GraphQLSchema.\\n\\nIf you are using `apollo-client` and your schema contains `interface` or `union` declaration, it\'s recommended to use Apollo\'s Fragment Matcher and the result generated by the plugin.\\n\\nYou can read more about it in `apollo-client` documentation: https://www.apollographql.com/docs/react/data/fragments/#fragments-on-unions-and-interfaces.\\n\\nFragment Matcher plugin accepts a TypeScript / JavaScript or a JSON file as an output _(`.ts, .tsx, .js, .jsx, .json`)_.\\n\\nBoth in TypeScript and JavaScript a default export is being used.\\n\\n> The output is based on the output you choose for the output file name.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/fragment-matcher\\n\\n=> Make sure to include \\"@graphql-codegen/fragment-matcher\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"urql-introspection","description":"This plugin generates an introspection file for Schema Awareness feature of Urql Cache Exchange\\n\\nYou can read more about it in `urql` documentation: https://formidable.com/open-source/urql/docs/graphcache/schema-awareness/.\\n\\nUrql Introspection plugin accepts a TypeScript / JavaScript or a JSON file as an output _(`.ts, .tsx, .js, .jsx, .json`)_.\\n\\nBoth in TypeScript and JavaScript a default export is being used.\\n\\n> The output is based on the output you choose for the output file name.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/urql-introspection\\n\\n=> Make sure to include \\"@graphql-codegen/urql-introspection\\" in your package.json file and install your dependencies.\\n\\n"},{"const":"@graphql-codegen/urql-introspection","description":"This plugin generates an introspection file for Schema Awareness feature of Urql Cache Exchange\\n\\nYou can read more about it in `urql` documentation: https://formidable.com/open-source/urql/docs/graphcache/schema-awareness/.\\n\\nUrql Introspection plugin accepts a TypeScript / JavaScript or a JSON file as an output _(`.ts, .tsx, .js, .jsx, .json`)_.\\n\\nBoth in TypeScript and JavaScript a default export is being used.\\n\\n> The output is based on the output you choose for the output file name.\\n\\nFor more details and documentation: https://graphql-code-generator.com/docs/plugins/urql-introspection\\n\\n=> Make sure to include \\"@graphql-codegen/urql-introspection\\" in your package.json file and install your dependencies.\\n\\n"}]},{"type":"string","description":"Point to a custom plugin loaded from your file-system.","pattern":"(\\\\\\\\?([^\\\\/]*[\\\\/])*)([^\\\\/]+)$"},{"type":"string","description":"You can point to any third-party module from node_modules that matches the requirements of a GraphQL Codegen plugin."}]}},"$ref":"#/definitions/Types.Config"}'),ne=function(){return i.createElement("div",null)};if(o.Z.canUseDOM){ne=n(15920).ZP;var ae=n(17841).languages;ae.yaml&&ae.yaml.yamlDefaults&&ae.yaml.yamlDefaults.setDiagnosticsOptions({validate:!0,enableSchemaRequest:!0,hover:!0,completion:!0,schemas:[{uri:"http://codegen/schema.json",fileMatch:["*"],schema:Object.assign({id:"http://codegen/schema.json"},te)}]})}var oe=function(e){var t=e.value,n=e.lang,a=e.readOnly,o=e.onEdit;if("undefined"==typeof window)return null;var s=(0,B.Z)().isDarkTheme,r={readOnly:a,minimap:{enabled:!1}};return i.createElement(ne,{height:"400",language:n,theme:s?"vs-dark":"vs",value:t,options:r,onChange:function(e){return o(e)}})},ie=n(67425),se=function(e){var t=e.outputArray,n=e.editorProps,o=e.error,s=i.useState(0),l=s[0],p=s[1],u=o||(t&&t[l]?t[l].content:"");return i.useEffect((function(){p(0)}),[t]),i.createElement(i.Fragment,null,i.createElement("div",{className:P},i.createElement("div",{className:I},(t||[]).map((function(e,t){var n;return i.createElement("div",{onClick:function(){return p(t)},key:e.filename,className:r()((n={},n[L]=!0,n[N]=l===t,n))},(0,ie.basename)(e.filename))})))),i.createElement(oe,(0,a.Z)({},n,{value:u})))};function re(e){var t=e.setSchema,n=e.schema,a=e.setDocuments,o=e.documents,s=e.setConfig,r=e.config,l=e.mode,p=e.error,u=e.output;return i.createElement(i.Fragment,null,i.createElement("div",{className:F},i.createElement("div",{className:P},i.createElement("img",{className:Q,alt:"GraphQL",src:"/img/GraphQL_Logo.svg"}),i.createElement("span",{className:j},"schema.graphql")),i.createElement(oe,{lang:"graphql",onEdit:t,value:n})),i.createElement("div",{className:F},i.createElement("div",{className:P},i.createElement("img",{className:Q,alt:"GraphQL",src:"/img/GraphQL_Logo.svg"}),i.createElement("span",{className:j},"operation.graphql")),i.createElement(oe,{lang:"graphql",onEdit:a,value:o||"# This example isn't\n# using GraphQL operations"})),i.createElement("div",{className:F},i.createElement("div",{className:P},i.createElement("img",{className:Q,alt:"Codegen",src:"/img/logo.svg"}),i.createElement("span",{className:j},"codegen.yml")),i.createElement(oe,{lang:"yaml",onEdit:s,value:r})),i.createElement("div",{className:F,style:{minWidth:"34vw",maxWidth:"34vw"}},i.createElement(se,{editorProps:{lang:l,readOnly:!0},error:p,outputArray:u})))}var le=n(30138),pe=Object.keys(E).map((function(e){return{label:e,options:E[e].map((function(t,n){return Object.assign({},t,{selectId:e+"__"+n})}))}}));function ue(e,t,n,a){var o=i.useState(null),s=o[0],r=o[1],l=i.useState(null),p=l[0],u=l[1];function c(){return(c=(0,b.Z)(C().mark((function a(){var o;return C().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,W(e,t,n);case 2:"string"==typeof(o=a.sent)?(u(null),r(o)):(u(o),r(null));case 4:case"end":return a.stop()}}),a)})))).apply(this,arguments)}return i.useEffect((function(){!function(){c.apply(this,arguments)}()}),[e,t,n,a]),{error:s,output:p}}var ce="TypeScript",de=0,fe=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={hasError:!1},n}(0,v.Z)(t,e),t.getDerivedStateFromError=function(){return{hasError:!0}};var n=t.prototype;return n.componentDidCatch=function(e,t){le.error(e,t)},n.render=function(){return this.state.hasError?i.createElement("span",null,"Something went wrong."):this.props.children},t}(i.Component),he=function(){var e=(0,B.Z)().isDarkTheme,t=i.useState(ce+"__"+de),n=t[0],a=t[1],o=i.useState(E[ce][de].schema),s=o[0],r=o[1],l=i.useState(E[ce][de].documents),p=l[0],u=l[1],c=i.useState(E[ce][de].config),d=c[0],f=c[1],h=ue(d,s,p,n),m=h.output,g=h.error,y=null;try{var v=(0,T.load)(d||"");y="typescript"===(y=function(e){var t=Object.keys(e.generates)[0].split("."),n=t[t.length-1];return R[n]}(v)||"typescript")?"text/typescript":y}catch(F){}var b=null;if(n){var w=n.split("__"),C=w[0],q=w[1];b=E[C][q].description}return i.createElement("div",null,i.createElement("div",{className:D},i.createElement("div",null,i.createElement("h3",null,"Choose Live Example: ")),i.createElement("div",null,i.createElement(K.ZP,{isSearchable:!1,styles:{menu:function(t){return Object.assign({},t,e?{backgroundColor:"black"}:{})},control:function(t){return Object.assign({},t,e?{backgroundColor:"black"}:{})},container:function(e){return Object.assign({},e,{display:"inline-block",width:"100%",textAlign:"left"})},option:function(t,n){var a=n.isFocused;return Object.assign({},t,{fontSize:13},e&&a?{backgroundColor:"gray"}:{})},singleValue:function(t){return Object.assign({},t,{width:"100%"},e?{color:"white"}:{})}},isMulti:!1,isClearable:!1,onChange:function(e){return function(e){var t=e.split("__"),n=t[0],o=t[1];r(E[n][o].schema),u(E[n][o].documents),f(E[n][o].config),a(e)}(e.selectId)},getOptionValue:function(e){return e.selectId},getOptionLabel:function(e){return i.createElement(i.Fragment,null,i.createElement("span",null,e.name),i.createElement("span",{className:S},e.tags&&e.tags.length?e.tags.map((function(t,n){return G[t]?G[t](e.name+"_"+n):i.createElement("span",{key:e.name+"_"+n,className:k},t)})):null))},defaultValue:pe[0].options[0],options:pe}),i.createElement("div",{className:x},b?i.createElement(ee(),{source:b}):null))),i.createElement("div",{className:A},i.createElement(Z.Z,null,(function(){return i.createElement(fe,null,i.createElement(i.Suspense,{fallback:i.createElement(J,{color:e?"#fff":"#000",height:"450px"})},i.createElement(re,{setSchema:r,schema:s,setDocuments:u,documents:p,setConfig:f,config:d,mode:y,error:g,output:m})))}))))},me=n(27061);o.Z.canUseDOM&&(me.hrtime=function(){return null});var ge=[{title:i.createElement(i.Fragment,null,"Generate Code Instantly"),imageUrl:"img/gear.svg",description:i.createElement(i.Fragment,null,"Generate code from your GraphQL schema and GraphQL operations with a single function call regardless of your environment or code format.")},{title:i.createElement(i.Fragment,null,"Watch For Changes"),imageUrl:"img/eye.svg",description:i.createElement(i.Fragment,null,"Watch for changes in your GraphQL schema and operations, and automatically generate code as you go. Codegen easily integrates into your development workflow.")},{title:i.createElement(i.Fragment,null,"Customize Easily"),imageUrl:"img/puzzle.svg",description:i.createElement(i.Fragment,null,"One of the goals of GraphQL Codegen is to allow you to easily customize the output, and add custom behaviour according to your needs.")},{title:i.createElement(i.Fragment,null,"And more!"),imageUrl:"img/more-options.svg",description:i.createElement(i.Fragment,null,"You can generate your resolvers' signatures, dump schemas, model types, query builders, React Hooks, Angular Services, and much more!")}];function ye(e){var t=e.imageUrl,n=e.title,a=e.description,o=(0,p.Z)(t);return i.createElement("div",{className:r()("col col--3",u.feature)},o&&i.createElement("div",{className:"text--center"},i.createElement("img",{className:u.featureImage,src:o,alt:n})),i.createElement("h3",null,n),i.createElement("p",null,a))}function ve(e){return i.createElement("div",{className:u.homeContainer},i.createElement("img",{className:u.desktopOnly,src:"/img/hexagons/blue.svg",style:{position:"absolute",left:"350px",top:"100px",height:"30px"}}),i.createElement("img",{className:u.desktopOnly,src:"/img/hexagons/pink.svg",style:{position:"absolute",left:"100px",top:"200px",height:"150px"}}),i.createElement("img",{className:u.desktopOnly,src:"/img/hexagons/blue.svg",style:{position:"absolute",left:"250px",top:"450px",height:"70px"}}),i.createElement("img",{className:u.desktopOnly,src:"/img/hexagons/pink.svg",style:{position:"absolute",right:"300px",top:"150px",height:"70px"}}),i.createElement("img",{className:u.desktopOnly,src:"/img/hexagons/blue.svg",style:{position:"absolute",right:"200px",top:"350px",height:"100px"}}),i.createElement("div",{className:u.homeSplashFade},i.createElement("div",{className:[u.wrapper,u.homeWrapper]},e.children)))}function be(){return i.createElement("div",{className:u.coverContainer},i.createElement("img",{src:"img/gql-codegen-cover.png",className:u.cover}),i.createElement("h3",{className:u.projectTitle},"Generate code from your GraphQL schema and operations with a simple CLI"),i.createElement("img",{alt:"npm",src:"https://img.shields.io/npm/v/@graphql-codegen/cli?color=%23e15799&label=cli\xa0version&style=for-the-badge"}))}var we=function(){return i.createElement(i.Fragment,null,i.createElement(l.Z,{title:"GraphQL Code Generator",description:""},i.createElement("header",null,i.createElement(ve,null,i.createElement("div",{className:u.inner},i.createElement(be,null),i.createElement("div",{className:u.buttonsWrapper},i.createElement(y,{mobileHide:!0},i.createElement(c.Z,{to:"#live-demo"},"Try It Out Live")),i.createElement(y,null,i.createElement(c.Z,{to:"/docs/getting-started/index"},"View Docs")))))),i.createElement("div",{className:r()(u.liveDemo,u.desktopOnly)},i.createElement("a",{id:"live-demo"}),i.createElement(he,null)),i.createElement("main",null,ge&&ge.length&&i.createElement("section",{className:u.features},i.createElement("div",{className:"container"},i.createElement("div",{className:"row"},ge.map((function(e,t){return i.createElement(ye,(0,a.Z)({key:t},e))}))))))))}}}]);